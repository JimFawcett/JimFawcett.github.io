<!DOCTYPE html>
<html>
  <head>
    <!-- 
     - Project5-F2014.htm - Project #5, Fall 2015
     - ver 1.0 - 12 Aug 2015
     - Jim Fawcett, Syracuse University
    -->
    <title>Project #5</title>
    <meta http-equiv="content-type" content="text/html;charset=UTF-8" />
    <meta name="description" content="Software Engineering course notes. Code Samples. Software Links" />
    <meta name="keywords" content="Lecture, Notes, Code, Syracuse,University" />
    <meta name="Author" content="Jim Fawcett" />
    <meta name="Author" content="James Fawcett" />
    <meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
    <script type="text/javascript" src="js/jquery-1.6.2.min.js"></script>
    <script type="text/javascript" src="js/TopMenuV2.js"></script>
    <script type="text/javascript" src="js/Fallback.js"></script>
    <link rel="stylesheet" href="css/TopLevelV2.css?v=1.0" />
    <link rel="stylesheet" href="css/LecturesSupplement.css?v=1.0" />
    <link rel="stylesheet" href="css/Fallback.css?v=1.0" />
    <style>
      ol { margin-top:5px; margin-bottom:5px; }
      ul > li { margin-left:-15px; margin-right:50px; }
      ol > li { margin:10px 50px 10px 0px; }
      .em
      {
        font-weight: bold;
      }
      #title 
      { 
        text-align:left; 
        margin:20px 20px 20px 18px; padding:0px;
      }
      #pagedate 
      { 
        text-align:left; 
        margin:20px;
      }
      section
      {
        border:0;
        margin:20px;
      }
      .footnote
      {
        font-size:small; margin-left:0px;
      }
      table { width:100%; margin:10px 0px 10px 0px; }
    </style>
  </head>
  <body>
    <header>
      <div class="container">
        <div id="prevlink">
          <a href="javascript: history.go(-1)">Back</a>
        </div>
        <div id="nextlink">
          <a href="javascript: history.go(-1)">Back</a>
        </div>
        <div id="topcenter">
          Software Modeling &amp; Analysis - Fall 2016
        </div>
      </div>
      <div id="pagetitle">
        <h2 id="title">Project #5 - Software Collaboration Federation</h2>
        <div id="pagedate">
          Version 1.0,
          <script type="text/javascript">
            document.write("Revised: " + document.lastModified)
          </script><br />
          Due Date: Wednesday, December 7th
        </div>
        <div>
        </div>
      </div>
    </header>

    <!-- Notes Content -->
    <div class="content">
      <section>
        <h3>Purpose:</h3>
        <p>
          Software Collaboration Federation (SCF) is a collection of clients and servers and associated software designed
          to support activities of a software development team, e.g.:
          <ul>
            <li>
              Creating and publishing plans for development.  This includes writing concept documents, creating
              and editing work packages, scheduling work packages, and allocating resources to work packages.
            </li>
            <li>Writing and publishing specification and design documents.</li>
            <li>Preparing new source code packages</li>
            <li>Acquiring existing source code packages for reuse</li>
            <li>Building execution images and loadable libraries</li>
            <li>
              Executing tests: unit tests, integration tests, regression tests, performance tests,
              stress tests, and acceptance tests.
            </li>
            <li>
              Deploying software executables and documentation.
            </li>
            <li>
              Reporting progress, key events, and failures.
            </li>
          </ul>
          In the Fall 2012 semester we developed an architecture for a Virtual Display System (VDS).  The system in which it
          is embedded is shown in Figure 1., below.  It is intended 
          to support collaboration for large software development teams.  One of its primary features - the one we focused on - is a 
          large display that serves as a visual interface into the design and implementation of complex software systems.  
          To understand how VDS functions you should review the preliminary architectural document provided to the Fall 2012 class, 
          <a href="../projects/Pr5F12.pdf">Preliminary Architecture for the Virtual Display System</a>.
        </p>
        <p>
          In this project we will explore how to structure the SCF, with emphasis on supporting continuous software test and
          integration.  You should assume that the Test Harness server provides the functionality we developed in
          <a href="Project4-F2016">Project #4</a>.  We will assume that SCF is intended to support development
          teams comprised of several hundred developers divided into groups at different locations throughout the world.
        </p>
      </section>
      <section>
        <h3>Background:</h3>
        <p>
          The SCF is comprised of a federation of clients and servers<sup>1</sup>:
          <ul>
            <li>
              <strong>Collaboration Server:</strong> supports project management, storing work package details and providing collaboration tools.
            </li>
            <li>
              <strong>Repository Server:</strong> Stores source code and documents using a configuration control system and provides exploratory tools
              based on metadata associated with each stored item.
            </li>
            <li>
              <strong>Build Server<sup>2</sup>:</strong> builds and caches execution images and libraries as needed for test and deployment.
            </li>
            <li>
              <strong>Test Harness Server:</strong> loads and executes test images provided by the build server.  The test server also provides
              deployment activities.
            </li>
            <li>
              <strong>Virtual Display Server:</strong> provides a sophisticated interface for publishing management information and
              collaboration activities that involve viewing source code, documents, diagrams, sketches, and webcams
              to enhance personal and team interactions.  This is a prime vehicle for collaboration between remote teams.
            </li>
            <li>
              <strong>Development Clients:</strong> provide user access to the many facilities of SCF including check-in and check-out of 
              code and documents, creation and scheduling tests, and viewing results<sup>3</sup>.
            </li>
            <li>
              <strong>Virtual Display Client:</strong> a specialized client that focuses on managing displays of documents, code, web cam views,
              and various charts and tables that describe progress and interactions between development groups.
            </li>
          </ul>
        </p>
        <p>
          <div>
            <img src="VDS.png" width="100%" />
            <div style="text-align:center; font-size:large; font-weight:bold">
              Figure 1. Software Collaboration Federation (SCF)
            </div>
          </div>
        </p>
      </section>
      <section>
        <p>
          SCF will use a Storage Management Subsystem (SMS) that provides a core SCF service<sup>4</sup> and is composed of Data and Event Managers
          hosted on each of the clients and servers in the SCF Federation and a Data and Event Coordinator that supervises the
          operation of all of the individual Data and Event Managers.
        </p>
        <p>
          The Storage Management System provides a number of services including storing and managing:
          <ul>
            <li>Routing lists for communication of messages and notifications</li>
            <li>Layout information for VDS: where are the windows, what content do they display</li>
            <li>Metadata for source code and documents in the repository</li>
            <li>Check-in/out status for code and documents in the repository</li>
            <li>Test configurations and results</li>
            <li>Lists of services and servers available to clients</li>
            <li>Templates for displays and messages</li>
          </ul>
        </p>
      </section>
      <section>
        <h3>Software Collaboration Federation Architecture:</h3>
        <p>
          In your Architecture Document you should summarize the SCF structure and behaviors, and then focus in detail on
          support for Continuous Test and Integration (CTAI) using the Test Harness Server and the Storage Management Subsystem. 
          For that you should:
          <ul>
            <li>
              Define the structure and the internal interactions<sup>5</sup> between elements of the Test Harness and the 
              Storage Management Subsystem and external interactions with other services and components of the SCF.
            </li>
            <li>
              Discuss behaviors that are common to all the Servers<sup>6</sup>.
            </li>
            <li>
              Discuss behaviors that are unique to each of the SCF servers and how the implementation will merge the unique
              and common operations.
            </li>
            <li>
              Discuss behaviors of the Data Storage Coordinator, how it will be hosted, and its interactions with the
              rest of the Subsystem as well as with the other parts of SCF.  Please emphasize its role in the interactions
              between Test Harness Server and the SCF Clients.
            </li>
            <li>
              Enumerate all of the data structures that SCF servers will have to handle, e.g., their structure, purpose,
              performance issues, and any other constraints that occur to you.
            </li>
            <li>Discuss how storing and managing new data configurations can be added to an existing SMS.</li>
            <li>
              Define all of the events that will be handled by SMS in its role supporting SCF operations:
              <ul>
                <li>Origin of the event.</li>
                <li>
                  Nature of the event, e.g., business as usual events - checkin, successful build completion, successful test
                  and errors or anomolous behavior.
                </li>
                <li>Notifications that result and their destinations.</li>
                <li>Event information that will be stored, that will be transmitted, and the lifetime of the information.</li>
                <li>Priority of messages and mechanisms for expediting the transmission of high priority messages.</li>
              </ul>
            </li>
            <li>
              Discuss how new events can be added and managed in an existing SMS.
            </li>
            <li>
              Discuss critical issues: complexity, security, performance, integration of SMS with the SCF communication service
              and with its other parts if you think there should be interactions with parts other than the communication service.
            </li>
            <li>
              How will SMS support giving users deep insight into the operations of SCF via: message content, message
              configuration, orchestrating the time of delivery of messages, displaying stored data content, and showing
              the data traffic and evolution of stored data?
            </li>
          </ul>
        </p>
      </section>
      <section>
        <h3>Prototypes:</h3>
        <p>
          In order to support the many decisions required to define the architecture of a large interesting software construct like SMS,
          an architect will build a set of prototypes to understand how things should work, explore performance issues, and decide on specific
          structures and patterns of communication.
        </p>
        <p>
          A prototype should be:
          <ul>
            <li>As small as is possible while answering questions that caused its construction.</li>
            <li>Simple enough that developers can understand it and use it as the basis for a more complete solution.</li>
            <li>Provide output information that contains convincing answers about the questions.</li>
            <li>Documented as an integral part of the architectural document(s).</li>
          </ul>
        </p>
        <p>
          You will be required, below, to implement at least two prototypes for Project #5.
        </p>    
      </section>
      <section>
        <h3>Requirements:</h3>
        Your Software Collaboration Federation (SCF) architectural document: 
        <ol>
          <li>
            <strong>Shall</strong> be written using Microsoft Word or an equivalent office suite that can generate documents in word or PDF format.
          </li>
          <li>
            <strong>Shall</strong> use diagrams created with Microsoft Visio or an equivalent tool that can generate diagrams embedded in
            your document.  These diagrams should be delivered in Visio, PDF, or PNG formats.
          </li>
          <li>
            Each diagram <strong>shall</strong> be accompanied by text that describes:
            <ul>
              <li>Why this diagram is here.</li>
              <li>What the diagram tells us.</li>
              <li>Conclusions we should draw from its presentation.</li>
            </ul>
          </li>
          <li>
            <strong>Shall</strong>, at the beginning provide an Executive Summary that very briefly summarizes the 
            main parts of your architecture, especially its users and uses, parts, and critical issues.  The summary
            <strong>does not</strong> list the things you did to develop the document.
          </li>
          <li>
            <strong>Shall</strong> briefly discuss the goals of the SCF and discuss in more detail the goals of the Test Harness
            in supporting Continuous Test and Integration.
          </li>
          <li>
            <strong>Shall</strong> briefly discuss the structure of the Software Collaboration Federation and then discuss in detail
            the structure of the Test Harness server, its data, and its events, and how SMS supports Test Harness server in
            support of CTAI.
          </li>
          <li>
            <strong>Shall</strong> briefly discuss the uses and users of the SCF and discuss in more detail the uses and users of the Test Harness.
            This discussion should consider the impact of uses on the design of the Test Harness server, explore uses beyond those specific to SCF<sup>7</sup>
            and decide if any of them need to be addressed in the development of SCF, e.g.: provide for future extensions and additions.
          </li>
          <li>
            <strong>Shall</strong> discuss the responsibilities of each of the parts identified above and interactions between them.
          </li>
          <li>
            <strong>Shall</strong> discuss issues that are critical for the development of SCF and propose means to address each
            of the issues deemed to be important for SCF.  In doing this you should emphasize issues associated with CTAI.
          </li>
          <li>
            <strong>Shall</strong>, at an appropriate place in the document, discuss each of at least two prototypes you've developed.
            You will develop the prototypes:
            <ul>
              <li>
                <strong>Test Harness Prototype:</strong><br/>
                Here, you are using the work you implemented in Project #4, to illustrate how the Test Harness will help SCF support
                CTAI.  For this you will prepare text and illustrations that help the reader understand how the Test Harness server
                functions and supports the goal of CTAI.
              </li>
              <li>
                <strong>Critical Issue Prototype(s):</strong><br/>
                This prototype is developed to help you answer questions and provide solutions to one or more of your critical issues.
                What you do and how you do it will be left to you. You will find me reluctant to discuss this in any detail.
              </li>
            </ul>
          </li>
        </ol>
        <p>
          <hr />
          <section class="footnote">
            <ol class="footnote">
              <li>
                Clients and servers are usually identified by machine boundaries but that is not always the case.  We
                may implement more than one server as virtual machines on a single physical machine.  Also, we may have
                more than one physical machine that implements a server.  For example, toward the end of a large project
                testing becomes a very intense large-scale activity and might be carried out on a Test Server Farm.
              </li>
              <li>
                The Build Server will probably share the same machine as the Repository and so is not shown in Figure 1.
              </li>
              <li>
                These clients are often processes that run on a developer's machine.  SCF clients are not expected to 
                provide compilers and editors and other build tools.  Those already exist and would be a waste of resources
                to re-implement.  So a developer's machine would have both the tools and the SCF client software.
              </li>
              <li>
                Note that Project #5, Fall 2015, focused on use of a NoSQL database that we developed in earlier projects
                during that semester.  This year we will assume that the Storage Management Subsystem (SMS) will be based
                on the open-source MongoDB.
                One would expect a system like SCF to have several services around which its functionality is configured,
                e.g., services for communication, security, storage, display, ...
              </li>
              <li>
                Each SCF server will have a core set of services that will be common to most of the other SCF servers.
              </li>
              <li>
                Services like Communication and SMS will contain many parts that interconnect with SCF and that handle it's internal operations, e.g.,
                data storage, query handling, persistance, message handling, and internal error handling.
              </li>
              <li>
                If we don't look to future expansion of capabilities we may find that after a big expense and effort to
                build the (sub)system we end up with an inflexible body of software with no growth potential. That's definately
                <strong>not</strong> what an architect is paid to create.
              </li>
            </ol>
          </section>
        </p>
      </section>
      <section>
        <h3>What you need to know:</h3>
        In order to successfully meet these requirements you will need to:
        <ol>
          <li>
            Understand the purpose of an architecture document, which is an elaboration of the Operational Concept Documents
            you developed in Projects #1 and #3.
          </li>
          <li>
            Understand the details of the design and implementation of Projects #2 and #4.
          </li>
        </ol>
      </section>
      <section>
        <h3>Things for which you lose points:</h3>
        <p>
          <ul>
            <li>
              Weak presentation of your discussions, e.g.: inadequate detail and inaccuracies in detail.
            </li>
            <li>
              Formatting issues: your text and diagrams should convey their information in clear, simple fashion.
              Formatting should be consistent.  If your diagrams and text are inconsistent in format, structure, and tone,
              it becomes clear that you did a lot of cut and paste from the web and class documents rather than thinking
              through issues and their presentation yourself.
            </li>
          </ul>
        </p>
      </section>
      <section>
        <h3>Things for which you gain points:</h3>
        <p>
          <ul>
            <li>
              I value highly your presentation of original ideas and discussion of original structures.
            </li>
            <li>
              Your content should provide a broad treatment of a lot of the system parts and behaviors with
              modest detail and much more detail for those parts you think are particularly interesting and/or important.
              The broad treatment teaches your reader about the system and its context.  The detailed treatment
              tells the reader about the important things you uncovered or developed.
            </li>
            <li>
              Feel free to bend the preliminary architecture presented above in ways you think are useful and
              interesting.
            </li>
          </ul>
        </p>
      </section>
    </div>
    <footer>
      <hr />
      <div id="topleft">
        <a href="javascript: history.go(-1)">Back</a>
      </div>
      <div id="topright">
        <a href="javascript: history.go(-1)">Back</a>
      </div>
      <img class="photo" src="pictures/facultyCenterStrip.jpg" width="100%" />
      <hr />
      Jim Fawcett &copy; copyright 2015
    </footer>
  </body>
</html>