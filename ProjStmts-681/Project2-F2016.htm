<!DOCTYPE html>
<html>
  <head>
    <!-- 
     - ProjectHelpers.htm - Note #0 - Getting Started
     - ver 1.1 - 17 Aug 2011
     - Jim Fawcett, Syracuse University
    -->
    <title>Project #2</title>
    <meta http-equiv="content-type" content="text/html;charset=UTF-8" />
    <meta name="description" content="Software Engineering course notes. Code Samples. Software Links" />
    <meta name="keywords" content="Lecture, Notes, Code, Syracuse,University" />
    <meta name="Author" content="Jim Fawcett" />
    <meta name="Author" content="James Fawcett" />
    <meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
    <script type="text/javascript" src="js/jquery-1.6.2.min.js"></script>
    <script type="text/javascript" src="js/TopMenuV2.js"></script>
    <script type="text/javascript" src="js/Fallback.js"></script>
    <link rel="stylesheet" href="css/TopLevelV2.css?v=1.0" />
    <link rel="stylesheet" href="css/LecturesSupplement.css?v=1.0" />
    <link rel="stylesheet" href="css/Fallback.css?v=1.0" />
    <style>
      ol { margin-top:5px; margin-bottom:5px; }
      ul > li { margin-left:-15px; margin-right:50px; }
      ol > li { margin:10px 50px 10px 0px; }
      .em
      {
        font-weight: bold;
      }
      #title 
      { 
        text-align:left; 
        margin:20px 20px 20px 18px; padding:0px;
      }
      #pagedate 
      { 
        text-align:left; 
        margin:20px;
      }
      section
      {
        border:0;
        margin:20px;
      }
      .footnote
      {
        font-size:small; margin-left:0px;
      }
    </style>
  </head>
  <body>
    <header>
      <div class="container">
        <div id="prevlink">
          <a href="javascript: history.go(-1)">Back</a>
        </div>
        <div id="nextlink">
          <a href="javascript: history.go(-1)">Back</a>
        </div>
        <div id="topcenter">
          Software Modeling &amp; Analysis - Fall 2016
        </div>
      </div>
      <div id="pagetitle">
        <h2 id="title">Project #2 - Test Harness</h2>
        <div id="pagedate">
          Version 1.3, 
          <script type="text/javascript">
            document.write("Revised: " + document.lastModified)
          </script><br />
          Due Date: Wednesday, October 5th
        </div>
        <div>
        </div>
      </div>
    </header>

    <!-- Notes Content -->
    <div class="content">
      <section>
        <h3>Purpose:</h3>
        <p>
          One focus area for this course is understanding how to structure and implement big software systems.  By big we mean systems
          that may consist of hundreds or even thousands of modules and perhaps several million lines of code.
        </p>
        <p>
          In order to successfully implement big systems we need to partition code into relatively small parts and thoroughly test
          each of the parts before inserting them into the software baseline<sup>1</sup>.  As new parts are added to the baseline and
          as we make changes to fix latent errors or performance problems we will re-run the test sequence for those parts
          and, perhaps, for the entire baseline.  Because there are so many packages the only way to make this intensive testing practical
          is to automate the process.  How we do that is the topic of the projects for this year.
        </p>
        <p>
          In this project we will be 
          creating a Test Harness - an automated test tool that runs a specified set of tests on multiple packages<sup>2</sup>.
          Each test execution runs a test driver on a small set of packages, recording pass status and perhaps logging execution
          details.  Test requests are submitted to the Test Harness via a request message naming one or more test driver executions.
        </p>
      </section>
      <section>
        <h3>Requirements:</h3>
        Your Test Harness project:
        <ol>
          <li>
            (1) <strong>Shall</strong> be implemented in C# using the facilities of the .Net Framework Class Library and Visual Studio 2015,
            as provided in the ECS clusters.
          </li>
          <li>
            (3) <strong>Shall</strong> implement a Test Harness Program that accepts one or more Test Requests, each in the form of an 
            XML file that specifies the test developer's identity and the names of 
            a set of one or more test drivers with the code to be tested.  Each test driver and the code it will be testing is implemented
            as a dynamic link library (DLL).  The XML file names one or more of these DLLs to execute.
          </li>
          <li>
            (2) The Test Harness <strong>shall</strong> enqueue Test Requests and execute them
            serially in dequeued order<sup>1</sup>.
          </li>
          <li>
            (2) Each test driver derives from an ITest interface that declares a method test() that takes no arguments and returns the test pass
            status, e.g., a boolean true or false value<sup>2</sup>.  Some interface also declares a getLog() function that returns a string 
            representation of the log<sup>3</sup>.
          </li>
          <li>
            (3) Test execution <strong>shall</strong> for each Test Request run in an AppDomain that isolates test processing from Test Harness processing.  Because we use a child
            AppDomain to run test executions, an unhandled exception in the test execution will not affect Test Harness processing.
          </li>
          <li>
            (2) Test logs are stored<sup>3</sup> by the Test Request's AppDomain and may be retrieved using the getLog() function.
          </li>
          <li>
            (2) The Test Harness <strong>shall</strong> <!--include an instance of <a href="https://www.mongodb.com/">MongoDB</a> that--> store test results and logs for
            each of the test executions using a key that combines the test developer identity and the current date-time.
          </li>
          <li>
            (2) The Test Harness <strong>shall</strong> support client queries about Test Requests<sup>4</sup> from the Log storage.
          </li>
          <li>
            (2) <strong>Shall</strong> be accompanied by a test executive that clearly demonstrates you've met all the functional
            requirements #2-#8, above.  If you do not demonstrate a requirement you will not get credit for it even if you have
            it correctly implemented.
          </li>
          <li>
            (1) <strong>Shall</strong> contain a brief text document that compares this implementation with the concept developed in
            Project #1.  Does this project fully implement its concept? Was the original concept practical? Were there things you 
            learned during the implementation that made the origninal concept less relevant?
          </li>
        </ol>
        <div class="paragSpacer"></div>
        <p>
          <hr />
          <section class="footnote">
            <ol class="footnote">
              <li>
                In Projects #3 and #4 we will make this process concurrent.  That is, each test request, as described by a single
                XML file, will run on its own thread in its own AppDomain.
              </li>
              <li>
                We will discuss in class how a complex test that may require arguments to execute can be activated through this
                simple interface.
              </li>
              <li>
                Note that an AppDomain created by the test harness calls, for each test in the test request, the function bool test() 
                and stores the test result and test log.  Your design must support some way for the client to retrieve the log,
                using getLog().  For Project #4 your design has to ensure that the client does not try to access the log before
                it has been stored by the child AppDomain.  Since Project #2 is single threaded that won't be a problem, but you
                should think about handling that situation when you prepare your OCD for Project #4.  
              </li>
              <li>
                You will satisfy these requirements if your client query can get two kinds of information.  One is simple summary
                information, e.g., author, date, and success status (true or false) for each test in the log.  This assumes you
                have one log for each test request.  The second type of query shows the entire log.  Since I added this footnote
                after the due date for your first OCD we cannot expect your concept to work this way.
              </li>
            </ol>
          </section>
        </p>
      </section>
      <section>
        <h3>What you need to know:</h3>
        In order to successfully meet these requirements you will need to:
        <ol>
          <li>
            Write C# code and use basic facilities of the .Net Framework.
          </li>
          <li>
            Use AppDomains.
          </li>
          <li>Read and Write XML files.</li>
        </ol>
        We may use MongoDB in Project #4.  One of the TAs is looking at this to see if that would be manageable along with
        everything else you need to do for that Project.  You might want to look a bit at the MongoDB documentation to get
        ready for that.
      </section>
    </div>
    <footer>
      <hr />
      <div id="topleft">
        <a href="javascript: history.go(-1)">Back</a>
      </div>
      <div id="topright">
        <a href="javascript: history.go(-1)">Back</a>
      </div>
      <img class="photo" src="pictures/facultyCenterStrip.jpg" width="100%" />
      <hr />
      Jim Fawcett &copy; copyright 2015
    </footer>
  </body>
</html>