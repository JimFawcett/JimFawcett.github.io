<!DOCTYPE html>
<html>
<head>
  <!--
   - Project1-F2017.htm - Project #1, Fall 2017
   - ver 1.0 - 16 Aug 2017
   - Jim Fawcett, Syracuse University
  -->
  <title>Project #1</title>
  <meta http-equiv="content-type" content="text/html;charset=UTF-8" />
  <meta name="description" content="Software Engineering course notes. Code Samples. Software Links" />
  <meta name="keywords" content="Lecture, Notes, Code, Syracuse,University" />
  <meta name="Author" content="Jim Fawcett" />
  <meta name="Author" content="James Fawcett" />
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
  <script type="text/javascript" src="js/jquery-1.6.2.min.js"></script>
  <script type="text/javascript" src="js/Fallback.js"></script>
  <script type="text/javascript" src="js/TopMenuV2.js"></script>
  <link rel="stylesheet" href="css/TopLevelV2.css?v=1.0" />
  <link rel="stylesheet" href="css/LecturesSupplement.css?v=1.0" />
  <link rel="stylesheet" href="css/Fallback.css?v=1.0" />
  <style>
    /*ol {
      margin-top: 5px;
      margin-bottom: 5px;
    }

    ul > li {
      margin-left: -15px;
      margin-right: 50px;
    }

    ol > li {
      margin: 10px 50px 10px 0px;
    }*/

    .em {
      font-weight: bold;
    }

    #title {
      text-align: left;
      margin: 20px 20px 20px 18px;
      padding: 0px;
    }

    #pagedate {
      text-align: left;
      margin: 20px;
    }

    section {
      border: 0;
      margin: 20px;
    }

    .footnote {
      font-size: small;
      margin-left: 0px;
    }

    ul.tightlist {
      margin-top: 5px;
      margin-bottom: 10px;
    }

      ul.tightlist li {
        margin-top: 0px;
        margin-bottom: 0px;
      }

        ul.tightlist li h4 {
          margin-top: 5px;
          margin-bottom: 5px;
        }
    #fed {
      width:40%;
    }
  </style>
  <script>
    var zoomPred = true;
    function doZoom(elem, type)
    {
      if (type == "input")
      {
        elem = document.getElementById("fed");
      }
      if (zoomPred)
      {
        elem.style.width = "70%";
        zoomPred = false;
      }
      else
      {
        elem.style.width = "40%";
        zoomPred = true;
      }
    }
  </script>
  <body>
    <a name="top"></a>
    <!-- site navigation menu built with Javascript -->
    <nav>
      <div id="nav">
        <div id="remove">
          <hr />
          <a href="TopNav.htm">Site Navigation with no Javascript</a>
          <hr />
          <br />
        </div>
      </div>
    </nav>
    <div id="pagenav">
      <ul>
        <li><a href="#top">T</a></li>
        <li><a href="Project2-F2017.htm#top">N</a></li>
        <li><a href="Project4-F2017.htm#top" prev>P</a></li>
        <li><a href="#bottom">B</a></li>
      </ul>
    </div>

    <header>
      <h2 id="title">Project #1 - Build Server OCD</h2>
      <div id="pagedate">
        Version 1.0,
        <script type="text/javascript">
          document.write("Revised: " + document.lastModified)
        </script><br />
        Due Date: Wednesday, September 13th
      </div>
      <div>
      </div>
      </div>
    </header>

    <!-- Notes Content -->
    <div class="content">
      <section>
        <h3>Purpose:</h3>
        <p>
          The acronym OCD stands for Operational Concept Document.  It's purpose is to make you think critically about the design
          and implementation of a project before committing to code.  It also serves to publish your concept to the development team,
          which for this course is you (and only you).  For this project we will be writing an Operational Concept Document for
          the remaining projects, e.g., Projects #2, #3, and #4.
        </p>
        <p>
          One focus area for this course is understanding how to structure and implement big software systems.  By big we mean systems
          that may consist of hundreds or even thousands of packages<sup>1</sup> and perhaps several million lines of code.
          We won't be building anything quite that large, but our projects may be considerably bigger than anything you've worked
          on before.
        </p>
        <p>
          In order to successfully implement big systems we need to partition code into relatively small parts and thoroughly test
          each of the parts before inserting them into the software baseline<sup>2</sup>.  As new parts are added to the baseline and
          as we make changes to fix latent errors or performance problems we will re-run test sequences for those parts
          and, perhaps, for the entire baseline.  Because there are so many packages the only way to make this intensive testing practical
          is to automate the process.  How we do that is related to projects for this year.
        </p>
        <p>
          The process, described above, supports continuous integration.  That is, when new code is created for a system, we build and test it
          in the context of other code which it calls, and which call it.  As soon as all the tests pass, we check in the code and it becomes
          part of the current baseline.  There are several services necessary to efficiently support continuous integration, as shown in the
          Figure 1., below, a Federation of servers, each providing a dedicated service for continuous integration.
          <div>
            <input type="button" value="click to zoom" style="margin:15px;" onclick="doZoom(this, 'input');" />
          </div>
          <div id="fed" style="width:30%; padding-right:40px;" onclick="doZoom(this);">
            <div class="photo" style="margin-top:0px; margin-bottom:10px; float:left;">
              <img src="pictures/CollabSys.png" width="100%" />
              <div class="center">Figure 1. Software Collaboration Federation</div>
            </div>
          </div>
          <div style="float:left; width:58%; padding-left:20px; margin-bottom:20px;">
            The Federation consists of:
            <ul class="tightlist">
              <li>
                <h4>Repository:</h4>
                Holds all code and documents for the current baseline, along with their dependency relationships.
                It also holds test results and may cache build images.
              </li>
              <li>
                <h4>Build Server:</h4>
                Based on build requests and code sent from the Repository, the Build Server builds test libraries for submission to the Test Harness.
                On completion, if successful, the build server submits test libraries and test requests to the Test Harness, and sends build logs
                to the Repository.
              </li>
              <li>
                <h4>Test Harness:</h4>
                Runs tests, concurrently for multiple users, based on test requests and libraries sent from the Build Server.  Clients
                will checkin, to the Repository, code for testing, along with one or more test requests.  The repository sends code and requests to the
                Build Server, where the code is built into libraries and the test requests and libraries are then sent to the Test Harness.
                The Test Harness executes tests, logs results, and submits results to the Repository.  It also notifies the author of the tests
                of the results.
              </li>
              <li>
                <h4>Client:</h4>
                The user's primary interface into the Federation, serves to submit code and test requests to the Repository.  Later, it will
                be used view test results, stored in the repository.
              </li>
              <li>
                <h4>Collaboration Server:</h4>
                The Collab Server provides services for: remote meetings, shared digital whiteboard, shared calendars.
                It also stores workplans, schedules, database of action items, etc.
              </li>
              <!--<li>
        <h4>Load Balancer and Scaled out Test Harnesses:</h4>
        These are not shown, in Figure 1., but may be needed for large projects.
      </li>-->
            </ul>
          </div>
          <div style="clear:both; margin-top:20px;"></div>
        </p>
        <h2>Build Server:</h2>
        <p>
          In the four projects for this course, we will be developing the concept for, and creating, one of these federated servers, the
          Build Server - an automated tool that builds test libraries.
          Each test execution, in the Test Harness, runs a library consisting of test driver and a small set of tested packages, recording pass status, and perhaps logging execution
          details.  Test requests and code are submitted by the Repository to the Build Server.  The Build Server then builds libraries
          needed for each test request, and submits the request and libraries to the Test Harness, where they are executed.
        </p>
        <p>
          The four projects each have a specific role leading to the final Remote Build Server:
          <ul>
            <li>
              For <a href="../lectures/Project1-F2017.htm">Project&nbsp;#1</a> you will create an Operational Concept Document (OCD) for a Remote Build Server,
              and a small prototype demonstrating
              <a href="https://stackoverflow.com/questions/6511380/how-do-i-build-a-solution-programmatically-in-c">programmable&nbsp;builds</a>.
            </li>
            <li>
              <a href="../lectures/Project2-F2017.htm">Project&nbsp;#2</a> focuses on building the core Build Server Functionality, and thoroughly testing to
              ensure that it functions as expected.
            </li>
            <li>
              In <a href="../lectures/Project3-F2017.htm">Project&nbsp;#3</a>, you will build prototypes for Process Pools, Socket-based Message-passing Communication,
              and for a Graphical User Interface (GUI), packages all needed for the last project.
              These are relatively small &quot;proof-of-concept&quot; projects in which you experiment with
              design and implementation strategies.
            </li>
            <li>
              Finally, in <a href="../lectures/Project4-F2017.htm">Project&nbsp;#4</a> you will build a Remote Build Server, using parts you
              developed in earlier projects. You will also add design details to your OCD, from <a href="Project1-F2017.htm">Project&nbsp;#1</a>,
              to create an &quot;as-built&quot; design document.
            </li>
          </ul>
        </p>
        <p>
          So, for this project we will develop and document a concept for a Build Server that we implement over the projects that follow.
          Your concept should explore:
          <ul style="margin-left:15px;">
            <li>
              Project purpose and typical users - consider impact of uses on your project design.
            </li>
            <li>
              Ways to make the user interface(s) effective.
            </li>
            <li>
              Suitable partitioning of processing into packages.
              Provide package diagram(s) and consider the responsibilities of each package and possible implementation approaches.
            </li>
            <li>Means to present results to the user.</li>
            <li>Important events and critical processing.</li>
          </ul>
          Note that, in these projects, we will not be integrating our Build Server with a Federation's Repository and Test Harness Servers.  Instead, we will build mock Repository 
          and Test Harness servers that supply
          just enough functionality to demonstrate operations of your Remote Build Server.  The Build Server will use a &quot;Federation ready&quot; communication channel
          to communicate with the mock servers, and we will build a mock client that has just enough functionality to demonstrate Build Server working in this environment.
          <div style="height:10px;"></div>
          So the mock Repository and mock Test Harness are simple servers, running in the Build Server's process in Project #2, and in their own processes in Project #4, using our Message-Passing Communication, to send and receive
          requests and replys.  However, the Mock operations are simple - not nearly as complex as full up Federated servers.
          <div style="height:15px;"></div>
          <div style="float:left; width:35%">
            <img class="photo" src="pictures/Project2BlockStructure.png" style="width:98%;" />
          </div>
          <div style="float:left; width:3%;">&nbsp;</div>
          <div style="float:left; width:60%">
            <img class="photo" src="pictures/Project4BlockStructure.png" style="width:98%;"/>
          </div>
          <div style="clear:both;"></div>
          We will discuss all of this at length in class and the help sessions.
        </p>
      </section>
      <section>
        <h3>Requirements:</h3>
        Your Build Server OCD
        <ol>
          <li>
            <strong>Shall</strong> be prepared as a Microsoft Office Word file, using embedded Visio Diagrams<sup>3</sup>.
          </li>
          <li>
            <strong>Shall</strong> explore and describe the user interface(s) you will provide.
          </li>
          <li>
            <strong>Shall</strong> partition processing into at least the top-level packages.
          </li>
          <li>
            <strong>Shall</strong> describe the uses/responsibilities, activities, events, and interactions
            of each of the packages in your concept.
          </li>
          <li>
            <strong>Shall</strong> use both text and diagrams for the descriptions in 4, above.
          </li>
          <li>
            <strong>Shall</strong> prepare a Visual Studio Project builder code prototype<sup>4</sup> which:
            <ul>
              <li>
                Loads a Visual Studio project from a specified path, that refers to C# packages in subdirectories, and attempts to build the project.
              </li>
              <li>
                Reports success or failure, and any warnings encountered by the build.
              </li>
            </ul>
            Discuss the prototype results and draw conclusions about what you've learned from the prototypes, in your OCD.
          </li>
          <li>
            <strong>Shall</strong> document prototype code you develop in an Appendix.  You don't need to
            include source code in your OCD document (please don't), but you do need to discuss the prototype design and show
            outputs.
            Please include your source code in a zip file used to submit your project for grading.
          </li>
        </ol>
        <div style="height:20px;"></div>
        <hr />
        <ol class="footnote">
          <li>
            In C# a package is a single file that has a prologue, consisting of comments that describe the package
            and its operations, one or more class implementations, and a test stub main function that serves as
            a construction test while building the package.
            This test stub is quite different from the test drivers we build with the Build Server and execute in the Test
            Harness.  We will discuss these differences in detail in class.
          </li>
          <li>
            A software baseline consists of all the code that we currently consider being part of the developing
            project, e.g., code that will eventually be delivered as part of the project results.
            It does not include prototypes and code from other projects that we are examining for
            possible later inclusion in the current project.
          </li>
          <li>
            You may use alternate office suites like <a href="http://wps.com/">WPS</a> or
            <a href="https://www.libreoffice.org/">LibreOffice</a>, and diagrammers like
            <a href="https://www.gliffy.com/">gliffy</a>, available as a chrome
            <a href="https://chrome.google.com/webstore/detail/gliffy-diagrams/bhmicilclplefnflapjmnngmkkkkpfad">app</a>.
            You may also find <a href="https://chrome.google.com/webstore/detail/workflowy/koegeopamaoljbmhnfjbclbocehhgmkm">WorkFlowy</a>
            useful for organizing both documents, like an OCD, an also for thinking about code structure.
          </li>
          <li>
            Here's some help - a &quot;stackoverflow.com&quot; thread on  
            <a href="https://stackoverflow.com/questions/6511380/how-do-i-build-a-solution-programmatically-in-c">Building C# code</a>
          </li>
        </ol>
      </section>
      <section>
        <h3>What you need to know:</h3>
        In order to successfully meet these requirements you will need to know:
        <ol>
          <li>
            The definition of the term <strong>package</strong> and have looked carefully at a few examples.
          </li>
          <li>How to organize and prepare a technical document: <a href="StudyGuideOCD.htm">OCD Study Guide</a></li>
        </ol>
      </section>
    </div>
    <footer>
      <hr />
      <div class="photo">
        <img src="../../webpages/pictures/FacultyCenterStrip.jpg" width="100%" />
      </div>
      <hr />
      <div style="position:absolute; left:35px;">Software Modeling &amp; Analysis Course Notes</div>
        Jim Fawcett &copy; copyright 2017
      <a name="bottom"></a>
    </footer>
  </body>
</html>