<!DOCTYPE html>
<html>
<head>
  <!--
   - Project1-F2017.htm - Project #1, Fall 2017
   - ver 1.0 - 16 Aug 2017
   - Jim Fawcett, Syracuse University
  -->
  <title>Project #3</title>
  <meta http-equiv="content-type" content="text/html;charset=UTF-8" />
  <meta name="description" content="Software Engineering course notes. Code Samples. Software Links" />
  <meta name="keywords" content="Lecture, Notes, Code, Syracuse,University" />
  <meta name="Author" content="Jim Fawcett" />
  <meta name="Author" content="James Fawcett" />
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
  <script type="text/javascript" src="js/jquery-1.6.2.min.js"></script>
  <script type="text/javascript" src="js/Fallback.js"></script>
  <script type="text/javascript" src="js/TopMenuV2.js"></script>
  <link rel="stylesheet" href="css/TopLevelV2.css?v=1.0" />
  <link rel="stylesheet" href="css/LecturesSupplement.css?v=1.0" />
  <link rel="stylesheet" href="css/Fallback.css?v=1.0" />
  <style>
    /*ol {
      margin-top: 5px;
      margin-bottom: 5px;
    }

    ul > li {
      margin-left: -15px;
      margin-right: 50px;
    }

    ol > li {
      margin: 10px 50px 10px 0px;
    }*/

    .em {
      font-weight: bold;
    }

    #title {
      text-align: left;
      margin: 20px 20px 20px 18px;
      padding: 0px;
    }

    #pagedate {
      text-align: left;
      margin: 20px;
    }

    section {
      border: 0;
      margin: 20px;
    }

    .footnote {
      font-size: small;
      margin-left: 0px;
    }

    ul.tightlist {
      margin-top: 5px;
      margin-bottom: 10px;
    }

      ul.tightlist li {
        margin-top: 0px;
        margin-bottom: 0px;
      }

        ul.tightlist li h4 {
          margin-top: 5px;
          margin-bottom: 5px;
        }
  </style>
  <script>
    var zoomPred = true;
    function doZoom(elem, type) {
      if (type == "input") {
        elem = document.getElementById("fed");
      }
      if (zoomPred) {
        elem.style.width = "70%";
        zoomPred = false;
      }
      else {
        elem.style.width = "40%";
        zoomPred = true;
      }
    }
  </script>
  <body>
    <a name="top"></a>
    <!-- site navigation menu built with Javascript -->
    <nav>
      <div id="nav">
        <div id="remove">
          <hr />
          <a href="TopNav.htm">Site Navigation with no Javascript</a>
          <hr />
          <br />
        </div>
      </div>
    </nav>
    <div id="pagenav">
      <ul>
        <li><a href="#top">T</a></li>
        <li><a href="Project4-F2017.htm#top">N</a></li>
        <li><a href="Project2-F2017.htm#top" prev>P</a></li>
        <li><a href="#bottom">B</a></li>
      </ul>
    </div>

    <header>
      <h2 id="title">Project #3 - Remote Build Server Prototypes</h2>
      <div id="pagedate">
        Version 2.2,
        <script type="text/javascript">
          document.write("Revised: " + document.lastModified)
        </script><br />
        Due Date: Wednesday, October 25th
      </div>
      <div>
      </div>
      </div>
    </header>

    <!-- Notes Content -->
    <div class="content">
      <section>
        <h3>Purpose:</h3>
        <p>
          One focus area for this course is understanding how to structure and implement big software systems.  By big we mean systems
          that may consist of hundreds or even thousands of packages<sup>1</sup> and perhaps several million lines of code.
        </p>
        <p>
          In order to successfully implement big systems we need to partition code into relatively small parts and thoroughly test
          each of the parts before inserting them into the software baseline<sup>2</sup>.  As new parts are added to the baseline and
          as we make changes to fix latent errors or performance problems we will re-run test sequences for those parts
          and, perhaps, for the entire baseline.  Because there are so many packages the only way to make this intensive testing practical
          is to automate the process.  How we do that is related to projects for this year.
        </p>
        <p>
          The process, described above, supports continuous integration.  That is, when new code is created for a system, we build and test it
          in the context of other code which it calls, and which call it.  As soon as all the tests pass, we check in the code and it becomes
          part of the current baseline.  There are several services necessary to efficiently support continuous integration, as shown in the
          Figure 1., below, a Federation of servers, each providing a dedicated service for continuous integration.
          <div>
            <input type="button" value="click to zoom" style="margin:15px;" onclick="doZoom(this, 'input');" />
          </div>
          <div id="fed" style="width:30%; padding-right:40px;" onclick="doZoom(this);">
            <div class="photo" style="margin-top:0px; margin-bottom:10px; float:left;">
              <img src="pictures/CollabSys.png" width="100%" />
              <div class="center">Figure 1. Software Collaboration Federation</div>
            </div>
          </div>
          <div style="float:left; width:58%; padding-left:20px; margin-bottom:20px;">
            The Federation consists of:
            <ul class="tightlist">
              <li>
                <h4>Repository:</h4>
                Holds all code and documents for the current baseline, along with their dependency relationships.
                It also holds test results and may cache build images.
              </li>
              <li>
                <h4>Build Server:</h4>
                Based on build requests and code sent from the Repository, the Build Server builds test libraries for submission to the Test Harness.
              </li>
              <li>
                <h4>Test Harness:</h4>
                Runs tests, concurrently for multiple users, based on test requests and libraries sent from the Build Server.  Clients
                will checkin, to the Repository, code for testing, along with one or more test requests.  The repository sends code and requests to the
                Build Server, where the code is built into libraries and the test requests and libraries are then sent to the Test Harness.
                The Test Harness executes tests, logs results, and submits results to the Repository.  It also notifies the author of the tests
                of the results.
              </li>
              <li>
                <h4>Client:</h4>
                The user's primary interface into the Federation, serves to submit code and test requests to the Repository.  Later, it will
                be used view test results, stored in the repository.
              </li>
              <li>
                <h4>Collaboration Server:</h4>
                The Collab Server provides services for: remote meetings, shared digital whiteboard, shared calendars.
                It also stores workplans, schedules, database of action items, etc.
              </li>
              <!--<li>
        <h4>Load Balancer and Scaled out Test Harnesses:</h4>
        These are not shown, in Figure 1., but may be needed for large projects.
      </li>-->
            </ul>
          </div>
        </p>
        <h2 style="clear:both;">Remote Build Server Prototypes:</h2>
        <p>
        <p>
          In the four projects for this course, we will be developing the concept for, and creating, one of these federated servers, the
          Build Server - an automated tool that builds test libraries.
          Each test execution, in the Test Harness, runs a library consisting of test driver and a small set of tested packages, recording pass status, and perhaps logging execution
          details.  Test requests and code are submitted by the Repository to the Build Server.  The Build Server then builds libraries
          needed for each test request, and submits the request and libraries to the Test Harness, where they are executed.
        </p>
        <p>
          The four projects each have a specific role leading to the final Remote Build Server:
          <ul>
            <li>
              For <a href="../lectures/Project1-F2017.htm">Project&nbsp;#1</a> you will create an Operational Concept Document (OCD) for a Remote Build Server,
              and a small prototype demonstrating
              <a href="https://stackoverflow.com/questions/6511380/how-do-i-build-a-solution-programmatically-in-c">programmable&nbsp;builds</a>.
            </li>
            <li>
              <a href="../lectures/Project2-F2017.htm">Project&nbsp;#2</a> focuses on building the core Build Server Functionality, and thoroughly testing to
              ensure that it functions as expected.
            </li>
            <li>
              In <a href="../lectures/Project3-F2017.htm">Project&nbsp;#3</a>, you will build prototypes for Process Pools, Socket-based Message-passing Communication,
              and for a Graphical User Interface (GUI), packages all needed for the last project.
              These are relatively small &quot;proof-of-concept&quot; projects in which you experiment with
              design and implementation strategies.
            </li>
            <li>
              Finally, in <a href="../lectures/Project4-F2017.htm">Project&nbsp;#4</a> you will build a Remote Build Server, using parts you
              developed in earlier projects. You will also add design details to your OCD, from <a href="Project1-F2017.htm">Project&nbsp;#1</a>,
              to create an &quot;as-built&quot; design document.
            </li>
          </ul>
        </p>
        <p>
          So, for this project #3, we will develop the prototypes:
          <ul style="margin-left:15px;">
            <li>
              <strong>Message-passing Communication Channel:</strong><br />
              All members of the Federation<sup>3</sup> use Message-Passing Communication, implemented with Windows Communication Foundation (WCF).
              The Process Pool members will also communicate with the mother Builder using WCF<sup>4</sup>.
            </li>
            <li>
              <strong>Process Pool:</strong><br />
              The build server may have very heavy work loads just before customer demos and releases.  We want to make the throughput for building
              code as high as is reasonably possible.  To do that the build server will use a &quot;Process&nbsp;Pool&quot;.  That is, a limited 
              set of processes spawned at startup.  The build server provides a queue of build requests, and each pooled process retrieves a
              request, processes it, sends the build log and, if successful, libraries to the test harness, then retrieves another request.
              <div style="height:10px;"></div>
              Malformed code may cause one of the
              processes to crash, perhaps by a circular set of C++ #include statements which overflow the process stack.  This however, won't stop
              the Builder, which simply creates a new process replacement, and reports the build error to the repository. Note that the process
              pools will need to communicate with the mother Builder process.  That's one use for the first prototype.
              <div style="height:10px;"></div>
              Each pooled process has the functionality of the Core Builder we constructed in Project #2l
            </li>
            <li>
              <strong>Graphical User Interface (GUI):</strong><br />
              The Remote Builder will be accessed remotely from a GUI built using Windows Presentation Foundation (WPF).  This 
              prototype will be relatively simple<sup>5</sup> step toward the final GUI used in <a href="Project4-F2017.htm">Project #4</a>.
            </li>
          </ul>
          You will need to demonstrate that these prototypes function as expected.  You are not required to integrate these pieces with the
          Build server and mock servers.  That's part of what we will do in Project #4.
        </p>
      </section>
      <section>
        <h3>Requirements:</h3>
        Your Prototypes
        <ol>
          <li>
            <strong>Shall</strong> be prepared using C#, the .Net Frameowrk, and Visual Studio 2017.
          </li>
          <li>
            <strong>Shall</strong> include a Message-Passing Communication Service built with WCF.  You are welcome to 
            build on the <a href="../code/Project3HelpF2017/MessagePassingcomm">Comm prototype</a> 
            demo. 
          </li>
          <li>
            The Communication Service <strong>shall</strong> support retrieving build requests by Pool Processes from the mother
            Builder process, sending and receiving build requests, and sending and receiving files.
          </li>
          <li>
            <strong>Shall</strong> provide a Process Pool component that creates a specified number of processes on command.
          </li>
          <li>
            Pool Processes <strong>shall</strong> use Communication prototype to access messages from the mother Builder process.
            You may simply have them write the message contents to their consoles, demonstrating that they continue to retrieve
            messages from the shared mother's queue, until shut down.
          </li>
          <li>
            <strong>Shall</strong> include a Graphical User Interface, built using WPF.
          </li>
          <li>
            The GUI <strong>shall</strong> provide mechanisms
            to start the main Builder (mother process), specifying the number of child builders to be started, and <strong>shall</strong> provide the facility to 
            ask the mother Builder to shut down its Pool Processes.  It may do that by sending a single quit message.
          </li>
          <li>
            The GUI <strong>shall</strong> enable building test requests by selecting file names from the Mock Repository.
          </li>
          <li>
            Your submission <strong>shall</strong> integrate these three prototypes into a single functional Visual Studio Solution, with a Visual Studio
            project for each.
          </li>
        </ol>
        <div class="notecallout">
          Note: The last requirement does not ask you to integrate the GUI, Process Pools, and Comm service into a federation.  It simply prevents
          you from supplying three separate solutions.
        </div>
        <div style="height:20px;"></div>
        <hr />
        <ol class="footnote">
          <li>
            In C# a package is a single file that has a prologue, consisting of comments that describe the package
            and its operations, one or more class implementations, and a test stub main function that serves as
            a construction test while building the package.
            This test stub is quite different from the test drivers we build with the Build Server and execute in the Test
            Harness.  We will discuss these differences in detail in class.
          </li>
          <li>
            A software baseline consists of all the code that we currently consider being part of the developing
            project, e.g., code that will eventually be delivered as part of the project results.
            It does not include prototypes and code from other projects that we are examining for
            possible later inclusion in the current project.
          </li>
          <li>
            Our Federation, as implemented for <a href="Project4.htm">Project #4</a>, consists of A GUI Client,
            Build Server with Process Pool, a mock Repository, and mock Test Harness, all tied together with
            the Message-Passing Communication System.
          </li>
          <li>
            You will find the WCF demo <a href="../Repository/CommWithFileXferService">here</a> to
            provide a significant amount of help.
          </li>
          <li>
            You will find the WPF demo <a href="../Repository/CodeWebifier">here</a> will
            get you started quickly.
          </li>
        </ol>
      </section>
      <section>
        <h3>What you need to know:</h3>
        In order to successfully meet these requirements you will need to know:
        <ol>
          <li>
            The definition of the term <strong>package</strong> and have looked carefully at a few examples.
          </li>
          <li>
            Definitions for Dynamic Link Libraries - see the class text, C# 6.0 in a Nutshell.
          </li>
        </ol>
      </section>
    </div>
    <footer>
      <hr />
      <div class="photo">
        <img src="../../webpages/pictures/FacultyCenterStrip.jpg" width="100%" />
      </div>
      <hr />
      <div style="position:absolute; left:35px;">Software Modeling &amp; Analysis Course Notes</div>
        Jim Fawcett &copy; copyright 2017
      <a name="bottom"></a>
    </footer>
  </body>
</html>