<!DOCTYPE html>
<html>
<head>
  <!--
   - Project2-F2017.htm - Project #2, Fall 2017
   - ver 1.0 - 16 Aug 2017
   - Jim Fawcett, Syracuse University
  -->
  <title>Project #2</title>
  <meta http-equiv="content-type" content="text/html;charset=UTF-8" />
  <meta name="description" content="Software Engineering course notes. Code Samples. Software Links" />
  <meta name="keywords" content="Lecture, Notes, Code, Syracuse,University" />
  <meta name="Author" content="Jim Fawcett" />
  <meta name="Author" content="James Fawcett" />
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
  <script type="text/javascript" src="js/jquery-1.6.2.min.js"></script>
  <script type="text/javascript" src="js/Fallback.js"></script>
  <script type="text/javascript" src="js/TopMenuV2.js"></script>
  <link rel="stylesheet" href="css/TopLevelV2.css?v=1.0" />
  <link rel="stylesheet" href="css/LecturesSupplement.css?v=1.0" />
  <link rel="stylesheet" href="css/Fallback.css?v=1.0" />
  <style>
    .em {
      font-weight: bold;
    }

    #title {
      text-align: left;
      margin: 20px 20px 20px 18px;
      padding: 0px;
    }

    #pagedate {
      text-align: left;
      margin: 20px;
    }

    section {
      border: 0;
      margin: 20px;
    }

    .footnote {
      font-size: small;
      margin-left: 0px;
    }

    ul.tightlist {
      margin-top: 5px;
      margin-bottom: 10px;
    }

      ul.tightlist li {
        margin-top: 0px;
        margin-bottom: 0px;
      }

        ul.tightlist li h4 {
          margin-top: 5px;
          margin-bottom: 5px;
        }

    #fed {
      width: 40%;
    }
  </style>
  <script>
    var zoomPred = true;
    function doZoom(elem, type) {
      if (type == "input") {
        elem = document.getElementById("fed");
      }
      if (zoomPred) {
        elem.style.width = "70%";
        zoomPred = false;
      }
      else {
        elem.style.width = "40%";
        zoomPred = true;
      }
    }
  </script>
  </head>
  <body>
    <a name="top"></a>
    <!-- site navigation menu built with Javascript -->
    <nav>
      <div id="nav">
        <div id="remove">
          <hr />
          <a href="TopNav.htm">Site Navigation with no Javascript</a>
          <hr />
          <br />
        </div>
      </div>
    </nav>
    <div id="pagenav">
      <ul>
        <li><a href="#top">T</a></li>
        <li><a href="Project3-F2017.htm#top">N</a></li>
        <li><a href="Project1-F2017.htm#top" prev>P</a></li>
        <li><a href="#bottom">B</a></li>
      </ul>
    </div>

    <header>
      <h2 id="title">Project #2 - Core Build Server</h2>
      <div id="pagedate">
        Version 1.0,
        <script type="text/javascript">
          document.write("Revised: " + document.lastModified)
        </script><br />
        Due Date: Wednesday, October 4th
      </div>
      <div>
      </div>
      </div>
    </header>

    <!-- Notes Content -->
    <div class="content">
      <section>
        <h3>Purpose:</h3>
        <p>
          One focus area for this course is understanding how to structure and implement big software systems.  By big we mean systems
          that may consist of hundreds or even thousands of packages<sup>1</sup> and perhaps several million lines of code.
        </p>
        <p>
          In order to successfully implement big systems we need to partition code into relatively small parts and thoroughly test
          each of the parts before inserting them into the software baseline<sup>2</sup>.  As new parts are added to the baseline and
          as we make changes to fix latent errors or performance problems we will re-run test sequences for those parts
          and, perhaps, for the entire baseline.  Because there are so many packages the only way to make this intensive testing practical
          is to automate the process.  How we do that is related to projects for this year.
        </p>
        <p>
          The process, described above, supports continuous integration.  That is, when new code is created for a system, we build and test it
          in the context of other code which it calls, and which call it.  As soon as all the tests pass, we check in the code and it becomes
          part of the current baseline.  There are several services necessary to efficiently support continuous integration, as shown in the
          Figure 1., below, a Federation of servers, each providing a dedicated service for continuous integration.
          <div>
            <input type="button" value="click to zoom" style="margin:15px;" onclick="doZoom(this, 'input');" />
          </div>
          <div id="fed" style="width:30%; padding-right:40px;" onclick="doZoom(this);">
            <div class="photo" style="margin-top:0px; margin-bottom:10px; float:left;">
              <img src="pictures/CollabSys.png" width="100%" />
              <div class="center">Figure 1. Software Collaboration Federation</div>
            </div>
          </div>
          <div style="float:left; width:58%; padding-left:20px; margin-bottom:20px;">
            The Federation consists of:
            <ul class="tightlist">
              <li>
                <h4>Repository:</h4>
                Holds all code and documents for the current baseline, along with their dependency relationships.
                It also holds test results and may cache build images.
              </li>
              <li>
                <h4>Build Server:</h4>
                Based on build requests and code sent from the Repository, the Build Server builds test libraries for submission to the Test Harness.
                On completion, if successful, the build server submits test libraries and test requests to the Test Harness, and sends build logs
                to the Repository.
              </li>
              <li>
                <h4>Test Harness:</h4>
                Runs tests, concurrently for multiple users, based on test requests and libraries sent from the Build Server.  Clients
                will checkin, to the Repository, code for testing, along with one or more test requests.  The repository sends code and requests to the
                Build Server, where the code is built into libraries and the test requests and libraries are then sent to the Test Harness.
                The Test Harness executes tests, logs results, and submits results to the Repository.  It also notifies the author of the tests
                of the results.
              </li>
              <li>
                <h4>Client:</h4>
                The user's primary interface into the Federation, serves to submit code and test requests to the Repository.  Later, it will
                be used view test results, stored in the repository.
              </li>
              <li>
                <h4>Collaboration Server:</h4>
                The Collab Server provides services for: remote meetings, shared digital whiteboard, shared calendars.
                It also stores workplans, schedules, database of action items, etc.
              </li>
              <!--<li>
        <h4>Load Balancer and Scaled out Test Harnesses:</h4>
        These are not shown, in Figure 1., but may be needed for large projects.
      </li>-->
            </ul>
          </div>
        </p>
        <h2 style="clear:both;">Core Build Server:</h2>
        <p>
          In the four projects for this course, we will be developing the concept for, and creating, one of these federated servers, the
          Build Server - an automated tool that builds test libraries.
          Each test execution, in the Test Harness, runs a library consisting of test driver and a small set of tested packages, recording pass status, and perhaps logging execution
          details.  Test requests and code are submitted by the Repository to the Build Server.  The Build Server then builds libraries
          needed for each test request, and submits the request and libraries to the Test Harness, where they are executed.
        </p>
        <p>
          The four projects each have a specific role leading to the final Remote Build Server:
          <ul>
            <li>
              For <a href="../lectures/Project1-F2017.htm">Project&nbsp;#1</a> you will create an Operational Concept Document (OCD) for a Remote Build Server,
              and a small prototype demonstrating
              <a href="https://stackoverflow.com/questions/6511380/how-do-i-build-a-solution-programmatically-in-c">programmable&nbsp;builds</a>.
            </li>
            <li>
              <a href="../lectures/Project2-F2017.htm">Project&nbsp;#2</a> focuses on building the core Build Server Functionality, and thoroughly testing to
              ensure that it functions as expected.
            </li>
            <li>
              In <a href="../lectures/Project3-F2017.htm">Project&nbsp;#3</a>, you will build prototypes for Process Pools, Socket-based Message-passing Communication,
              and for a Graphical User Interface (GUI), packages all needed for the last project.
              These are relatively small &quot;proof-of-concept&quot; projects in which you experiment with
              design and implementation strategies.
            </li>
            <li>
              Finally, in <a href="../lectures/Project4-F2017.htm">Project&nbsp;#4</a> you will build a Remote Build Server, using parts you
              developed in earlier projects. You will also add design details to your OCD, from <a href="Project1-F2017.htm">Project&nbsp;#1</a>,
              to create an &quot;as-built&quot; design document.
            </li>
          </ul>
        </p>
        <p>
          So, for this project #2, we develop core functionality of a Build Server that will grow into a Remote Build Server over the following projects.
          Note that we will not be integrating our Build Server with a Federation's Repository and Test Harness Servers.  
          <div style="height:0px;"></div>
          Instead, we will, in this project, build code for a single process, the Core Build Server.  Its source will contain packages for
          mock Repository and Test Harness servers that supply just enough functionality to demonstrate operations of your core Build Server.  
          <div style="height:15px;"></div>          
          The core Build Server's Executive package serves as a local mock client, and the mock Repository and Test Harness are simply classes that
          provide interfaces for the executive to call, so there is no need for a communication channel.
          The mock servers will have just enough functionality to demonstrate Build Server operation.
          <div style="height:15px;"></div>
          <div style="float:left; width:35%">
            <img class="photo" src="pictures/Project2BlockStructure.png" style="width:98%;" />
          </div>
          <div style="float:left; width:3%;">&nbsp;</div>
          <div style="float:left; width:60%">
            <img class="photo" src="pictures/Project4BlockStructure.png" style="width:98%;" />
          </div>
          <div style="clear:both;"></div>
          <div style="height:15px;"></div>
          We will discuss all of this at length in class and the help sessions.
        </p>
      </section>
      <section>
        <h3>Requirements:</h3>
        Your Core Project Builder
        <ol>
          <li>
            <strong>Shall</strong> be prepared using C#, the .Net Frameowrk, and Visual Studio 2017.
          </li>
          <li>
            <strong>Shall</strong> include packages for an Executive, mock Repository, and mock Test Harness, as well as packages for the Core Project Builder.
          </li>
          <li>
            The Executive <strong>shall</strong> construct a fixed sequence of operations of the mock Repository, mock Test Harness, and Core Project Builder,
            to demonstrate Builder operations.
          </li>
          <li>
            The mock Repository <strong>shall</strong>, on command, copy a set of test source code files, test drivers, and a test request<sup>3</sup>
            with a test for each test driver, to a path known to the Core Project Builder.
          </li>
          <li>
            The Core Project Builder <strong>shall</strong> attempt to build each Visual Studio project delivered by the mock Repository, using the delivered code.
          </li>
          <li>
            The Core Builder <strong>shall</strong> report, to the Console, success or failure of the build attempt, and any warnings emitted.
          </li>
          <li>
            The Core Builder <strong>shall</strong>, on success, deliver the built library to a path known by the mock Test Harness.
          </li>
          <li>
            The mock Test Harness <strong>shall</strong> attempt to load and execute each test library, catching any execeptions that may be emitted,
            and report sucess or failure and any exception messages, to the Console.
          </li>
          <li>
            One interesting issue: it would be desireable to build sources from several often used languages, e.g., C#, C++, Java, etc.
            If you base your build process on the MSBuild library, that won't work for Java and won't work for anything on Linux platforms.
            Building for multiple platforms with multiple source languages may not be as difficult as it sounds.  The idea is to
            create your own Build infrastruction that uses the compilers and their tool chains for the target platform.  Essentially, you
            need to set up a configuration file for each platform and toolchain that identifies the paths to the tools you need, and translates
            your Builders commands into those needed by specific tool chains.
            <div style="height:10px;"></div>
            This isn't required.  You may simply build C# projects, using a Visual Studio generated project file and the MSBuild system.
            If, however, you elect to try creating the more capable Builder, you will be awarded bonus points, up to 6 points if everything works.
          </li>
        </ol>
        Note that you will only get credit for requirements that are clearly demonstrated by the operations of the Executive and it's colleagues.
        <div style="height:20px;"></div>
        <hr />
        <ol class="footnote">
          <li>
            In C# a package is a single file that has a prologue, consisting of comments that describe the package
            and its operations, one or more class implementations, and a test stub main function that serves as
            a construction test while building the package.
            This test stub is quite different from the test drivers we build with the Build Server and execute in the Test
            Harness.  We will discuss these differences in detail in class.
          </li>
          <li>
            A software baseline consists of all the code that we currently consider being part of the developing
            project, e.g., code that will eventually be delivered as part of the project results.
            It does not include prototypes and code from other projects that we are examining for
            possible later inclusion in the current project.
          </li>
          <li>
            A Test Request is an XML file that identifies one or more tests.  Each test has a test driver that implements an ITest interface 
            and a set of packages that are associated with that test driver.  So, the Mock Repository will have to know how to
            create Test Requests, and the Builder has to know how to parse them.
          </li>
        </ol>
      </section>
      <section>
        <h3>What you need to know:</h3>
        In order to successfully meet these requirements you will need to know:
        <ol>
          <li>
            How to programmatically build C# projects.  Here's  
            <a href="https://stackoverflow.com/questions/6511380/how-do-i-build-a-solution-programmatically-in-c">some help</a>.
          </li>
          <li>
            The definition of the term <strong>package</strong> and have looked carefully at a few examples.
          </li>
          <li>
            Definitions for Dynamic Link Libraries - see the class text, C# 6.0 in a Nutshell.
          </li>
        </ol>
      </section>
    </div>
    <footer>
      <hr />
      <div class="photo">
        <img src="../../webpages/pictures/FacultyCenterStrip.jpg" width="100%" />
      </div>
      <hr />
      <div style="position:absolute; left:35px;">Software Modeling &amp; Analysis Course Notes</div>
        Jim Fawcett &copy; copyright 2017
      <a name="bottom"></a>
    </footer>
  </body>
</html>