<!DOCTYPE html>

<html lang="en">
<head>
  <meta charset="utf-8" />
  <title>Inheritance</title>
  <meta name="description" content="Software Engineering course notes. Code Samples. Software Links" />
  <meta name="keywords" content="Lecture, Notes, Code, Syracuse,University" />
  <meta name="Author" content="Jim Fawcett" />
  <meta name="Author" content="James Fawcett" />
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
  <script src="js/ScriptsTemplate.js"></script>
  <script src="js/ScriptsKeyboard.js"></script>
  <script src="js/ScriptsMenu.js"></script>
  <link rel="stylesheet" href="css/StylesTemplate.css" />
  <link rel="stylesheet" href="css/StylesMenu.css" />
  <style>
    h4 {
      margin-bottom: 10px;
    }

    .bottomSpace {
      margin-bottom: 15px;
    }
  </style>
</head>
<body id="github" onload="initializeMenu()">
  <body id="github" onload="initializeMenu()">

    <navKeysContainer>
      <navKey onclick="scrollPageTop()">T</navKey>
      <navKey onclick="scrollPageBottom()">B</navKey>
      <navKey onclick="helpWin()">H</navKey>
      <navKey onclick="loadPrev()">P</navKey>
      <navKey onclick="loadNext()">N</navKey>
    </navKeysContainer>

    <nav>
      <div id="navbar"></div>
    </nav>
    <!--<a id="Next" href="BlogDesign.htm">N</a>
  <a id="Prev" href="BlogFileSystem.htm">P</a>-->

    <header>
      <hgroup id="pagetitle">
        <h1 id="title">Class Inheritance</h1>
        <!--<h2 id="subtitle" class="indent">JimFawcett</h2>-->
      </hgroup>
    </header>

    <!-- page content -->
    <main id="main">
      <h3 style="margin-top: 0px;">Class Relationships:</h3>
      <div class="indent" style="margin-bottom:10px;">
        Inheritance is one of four <a href="Resources/ClassRelationships.pdf">class relationships</a>
        we use to construct Object Oriented Designs: Inheritance, Composition, Aggregation,
        and Using.  Inheritance is an "is-a" relationship.  Composition is a strong ownership or "part-of" relationship.  Aggregation
        is also a "part-of" relationship, but is weaker than composition because it does not guarantee that the aggregated part is
        owned, only that it can be owned by the aggregator.  Finally, using is a dependency on an object that is not part of the user,
        was not created by the user, and should not be destroyed by the user.
      </div>
      <h3>Inheritance:</h3>
      <div class="indent">
        <div style="float:left; margin:10px; border:1px solid gray; padding:5px; text-align:center; box-shadow:5px 5px 2px #888;">
          <img src="Pictures/Actors.jpg" ; height="450" />
          <div style="text-align:center">
            People
          </div>
        </div>
        <div style="float:left; max-width:50%; padding:0px 0px 0px 20px;">
          <ul>
            <li>
              Inheritance is a specialization relationship.  Soldier specializes Person and Officer, Sergeant, and Private specialize Soldier.
            </li>
            <li>
              Class methods may be qualifed as virtual, and may be declared to be pure virtual (using = 0).
              <ul>
                <li>Non-virtual methods should not be redefined in derived classes.</li>
                <li>Virtual methods may be, but don't have to be, redefined in derived classes.</li>
                <li>Pure virtual methods must be defined in derived classes because the base doesn't define them.</li>
              </ul>
            </li>
            <li>Constructors, destructors, and assignment operators are not inherited.  All other methods are.</li>
            <li>Code reuse through inheritance is useful.</li>
            <li>
              The most important behavior is substitution.  Any pointer or reference to a base instance may be replaced
              by a pointer or reference to any instance of a class that derives from the base.  See the show(Soldier&)
              function for an example.
            </li>
          </ul>
        </div>
        <div style="clear:both;"></div>
        <div style="height:30px;"></div>
        <h3>Code Example:</h3>
        <div class="indent bottomSpace">
          <a href="CodeSnap-Inheritance.h.htm">People Inheritance Code Example</a>,
          <a href="../code/codesnaps/inheritance">Code folder</a>
        </div>
        <div style="float:right; margin:10px; border:1px solid gray; padding:10px; text-align:center; box-shadow:5px 5px 2px #888;">
          <img src="Pictures/vtbl.jpg" width="700" />
          <div style="text-align:center;">
            Virtual Function Pointer Table
          </div>
        </div>
        <h3>Substituability:</h3>
        <div>
          Substitutability occurs because all classes publicly derived from the same base class share the base's member functions
          and so respond to the same client commands, but each in their own way.
          <p></p>
          All pointers or references of base type can be bound to an instance of any class that derives from the base.
          A function that accepts the base pointer or reference will invoke functions of the type of the bound instance.
          The mechanism that provides this behaviour is a dynamic dispatch using the Virtual Function Pointer Table (VFPT).
          <p></p>
          If an instance of derived class D is bound to a pointer of its base type B, invocations of a virtual method using
          the base pointer are dispatched using bindings from the VFPT, show in the diagram to the left.
          <p></p>
          Here, member function mf1 is not overridden by the derived class, so bPtr2->mf1() invokes the base's function.
          Member function mf2 is overridden by the derived class, so bPtr2->mf2() invokes the derived class's function.
        </div>
        <div style="clear:both; height:10px;"></div>
        <div>
          <h3>More Details about Inheritance:</h3>
          <ul>
            <li><a href="../Lectures/cse687designConcept8.htm">Three tier class hierarchy</a></li>
            <li>
              <a href="../Presentations/hier.pdf">Inheritance Presentation</a>,
              <a href="../presentations/hier.pptx">pptx</a>
            </li>
            <li><a href="../code/WidgetFactory">Widget Factory</a></li>
            <li><a href="../Code/FactoryForAbstractProduct">Factory for Abstract Product</a></li>
            <li><a href="../Code/NonVirtualInterfaces">Non-virtual interfaces</a></li>
            <li><a href="../Code/HetList">Heterogeneous List</a></li>
          </ul>
        </div>
        <div>
          <h3>Some important examples of inheritance:</h3>
          <ul>
            <li><a href="../../webpages/BlogParser.htm">Source Code Parser</a></li>
            <li><a href="../Repository/CodeAnalyzer">Tokenizer</a></li>
            <li><a href="../Repository/XmlDocument">XmlDocument</a></li>
          </ul>
          Inheritance plays a major role in building Plugins, as we will see later.
        </div>
      </div>
      <div id="spacer"></div>
    </main>
    <p>
      <img class="photo" src="pictures/Campusstrip.jpg" alt="CST strip" width="97%" />
    </p>
    <footer>
      <hr />
      <div style="position:absolute; left:35px;">Computer Engineering Course Notes</div>
      Jim Fawcett &copy; copyright 2016
    </footer>
    <a name="bottom"></a>
  </body>
</html>