<!DOCTYPE html>
<html>
<head>
  <!--
   - Project2-S2018.htm - Project #2, Spring 2017
   - ver 1.0 - 28 December 2016
   - Jim Fawcett, Syracuse University
  -->
  <title>Project #2</title>
  <meta http-equiv="content-type" content="text/html;charset=UTF-8" />
  <meta name="description" content="Software Engineering course notes. Code Samples. Software Links" />
  <meta name="keywords" content="Lecture, Notes, Code, Syracuse,University" />
  <meta name="Author" content="Jim Fawcett" />
  <meta name="Author" content="James Fawcett" />
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
  <script src="js/ScriptsTemplate.js"></script>
  <script src="js/ScriptsKeyboard.js"></script>
  <script src="js/ScriptsMenu.js"></script>
  <link rel="stylesheet" href="css/StylesTemplate.css" />
  <link rel="stylesheet" href="css/StylesMenu.css" />
</head>
<body onload="initializeMenu()" oncontextmenu="return false;">
  <nav>
    <div id="navbar"></div>
  </nav>
  <a id="Next" href="Project3-S2018.htm">N</a>
  <a id="Prev" href="Project1-S2018.htm">P</a>

  <navKeysContainer>
    <navKey onclick="scrollPageTop()">T</navKey>
    <navKey onclick="scrollPageBottom()">B</navKey>
    <navKey onclick="helpWin()">H</navKey>
    <navKey onclick="loadPrev()">P</navKey>
    <navKey onclick="loadNext()">N</navKey>
  </navKeysContainer>
  <div onmouseover="scrollMenuDown()">

    <header>
      <div id="pagetitle">
        <h1 id="title">Project #2 - Software Repository Testbed</h1>
        <h3 id="subtitle">Spring 2018</h3>
        <div id="pagedate">
          Version 1.1
          ,
          Due Date: Tuesday March 6th
        </div>
        <div>
        </div>
      </div>
    </header>

    <!-- Notes Content -->

      <section>
        <h2>Purpose:</h2>
        <p>
          When a software system becomes large there may be many hundreds, or even thousands, of packages that make
          up its source code. Efficient development requires a means for reliably storing, versioning, and viewing
          each of its parts.
        </p>
        <p>
          The second project this Spring focuses on building the core capability of a Software Repository.
          The Repository is intended to manage a, possibly large, collection of source code packages,
          providing versioning, check-in, check-out, and browsing.
        </p>
        <p>
          This first stage will consist of a single RepositoryCore process, with an integrated client used for testing.
          It does not attempt to provide a user the ability to use its features by asynchronous actions.  Rather, the client
          simply provides a programmed set of tests to demonstrate the core capabilities.
        </p>
        <p>
          We will use the NoSql databased, developed in Project #1, to store metadata about each file in the repository.
          Version numbers will be appended to file names on check-in.  All other information will be contained in metadata,
          e.g., description, author, check-in status (open or closed), files on which it depends, categories to which the
          file belongs, and its storage path in the Repository.
        </p>
        <p>
          In later projects we will build interprocess communication channels and user interfaces to support
          user interactions from separate client processes.
        </p>
      </section>
      <section>
        <h2>Requirements:</h2>
        Your RepositoryCore Project:
        <ol>
          <li>
            (1) <strong>Shall</strong> use Visual Studio 2017 and the standard C++ libraries, as provided in the ECS computer labs.
          </li>
          <li>
            (1) <strong>Shall</strong> use the C++ standard library's streams for all I/O and new and delete for all heap-based memory management<sup>1</sup>.
          </li>
          <li>
            (2) <strong>Shall</strong> provide C++ packages:
            <ul>
              <li>
                TestExecutive: executes a sequence of tests to demonstrate core Repository functionality.
              </li>
              <li>
                RepositoryCore: provides means to check-in, version, browse, and check-out source code packages.
              </li>
              <li>
                Check-in: provides the functionality to start a new package version by accepting files,
                appending version numbers to their filenames, providing dependency and category information,
                creating metadata, and storing the files in a designated location.
              </li>
              <li>
                Check-out: retrieves package files, removing version information from their filenames.
                Retrieved files will be copied to a specified directory.
              </li>
              <li>
                Version: manages version numbering for all files held in the Repository.
              </li>
              <li>
                Browse: provides the capability to locate files and view their contents.
              </li>
            </ul>
            You are free to
            alter the names and division of responsibilities as you see fit.  However, you are expected to enforce the &quot;Single Responsiblity Principle&quot;<sup>2</sup>
            as illustrated in the package structure described above.
          </li>
          <li>
            (3) <strong>Shall</strong> support check-in by accepting a single package's files<sup>3</sup> and append
            a version number to the end of each file name, e.g., p5.h and p5.cpp become p5.h.3 and p5.cpp.3 if the
            package name is p5 and the last closed check-in for that package was version 2. A check-in is open, by
            default.  A package with open check-in can be modified without altering its version number.  Once a
            check-in is closed, that version of the package becomes immutable.
            <div style="height:15px;"></div>
            The author of a check-in defines all of the packages that the check-in package depends on.  However,
            a check-in can only be closed if its dependent packages are all present in the Repository, with closed
            check-ins.
          </li>
          <li>
            (5) <strong>Shall</strong> support browsing of one or more packages by displaying package descriptions.
            The packages to be browsed are identified by a query on the NoSql database that holds metadata for all
            packages in the repository.  The full package text <strong>shall</strong> be displayed on demand,
            identified by one of the keys returned from the initial browse query.
          </li>
          <li>
            (4) Your Repository <strong>shall</strong> be submitted with several packages, all with closed check-ins,
            and a few packages with open check-ins.
          </li>
          <li>
            (2) The TestExecutive <strong>shall</strong> execute a series of tests that clearly demonstrate your project
            satisfies each of the Requirements, above.
          </li>
        </ol>
      </section>
      <section class="footnote">
        <div style="height:20px;"></div>
        <hr />
        <ol style="font-size:small">
          <li>
            That means that you are not allowed to use any of the C language I/0, e.g., printf, scanf, etc, nor the C memory management, e.g.,
            calloc, malloc, or free.
          </li>
          <li>
            <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle">https://en.wikipedia.org/wiki/Single_responsibility_principle</a>
          </li>
          <li>This is in addition to the construction tests you include as part of every package you submit.</li>
        </ol>
        <div style="height:20px;"></div>
      </section>
      <section class="know">
        <h2>What you need to know:</h2>
        In order to successfully meet these requirements you will need to know:
        <ol>
          <li>
            Details of the C++ language: <a href="http://cppReference.com">http://CppReference.com</a>.
          </li>
          <li>
            All those things you learned while developing code for Projects #1.
          </li>
          <li>
            How the <a href="../../Repository/CodeAnalyzer">CodeAnalyzer</a> works.  The TAs and I will give you a lot
            of help with this.<br />
            Also, you should look at the blog: <a href="../../webpages/BlogParser.htm">Parser</a>.
          </li>
          <li>
            A Strong Component Algorithm: <a href="https://en.wikipedia.org/wiki/Tarjan's_strongly_connected_components_algorithm">Tarjan Algorithm description and pseudo code</a>
          </li>
          <li>
            The <a href="../../CoreTechnologies/Cpp/Code/STL-Containers">STL Containers</a>.
          </li>
        </ol>
      </section>
    </div>
  <img class="strip-photo" src="pictures/facultyCenterStrip.jpg" />
  <info-bar></info-bar>
</body>
</html>