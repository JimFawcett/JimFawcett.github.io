<!DOCTYPE html>
<html>
<head>
  <!--
   - Project4-S2015.htm - Project #4, Spring 2016
   - ver 1.0 - 06 January 2016
   - Jim Fawcett, Syracuse University
  -->
  <title>Project #4</title>
  <meta http-equiv="content-type" content="text/html;charset=UTF-8" />
  <meta name="description" content="Software Engineering course notes. Code Samples. Software Links" />
  <meta name="keywords" content="Lecture, Notes, Code, Syracuse,University" />
  <meta name="Author" content="Jim Fawcett" />
  <meta name="Author" content="James Fawcett" />
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
  <script src="js/ScriptsTemplate.js"></script>
  <script src="js/ScriptsKeyboard.js"></script>
  <script src="js/ScriptsMenu.js"></script>
  <link rel="stylesheet" href="css/StylesTemplate.css" />
  <link rel="stylesheet" href="css/StylesMenu.css" />
</head>
<body onload="initializeMenu()" oncontextmenu="return false;">
  <nav>
    <div id="navbar"></div>
  </nav>
  <a id="Next" href="Project1-S2018.htm">N</a>
  <a id="Prev" href="Project3-S2018.htm">P</a>

  <navKeys-Container>
    <nav-Key id="sKey" onclick="toggleSwipeEvents()">S</nav-Key>
    <nav-Key onclick="scrollPageTop()">T</nav-Key>
    <nav-Key onclick="scrollPageBottom()">B</nav-Key>
    <nav-Key onclick="helpWin()">H</nav-Key>
    <nav-Key onclick="loadPrev()">P</nav-Key>
    <nav-Key onclick="loadNext()">N</nav-Key>
  </navKeys-Container>
  <div onmouseover="scrollMenuDown()">

    <header>
      <div id="pagetitle">
        <h1 id="title">Project #4 - Remote Code Repository</h1>
        <h3 id="subtitle">Spring 2018</h3>
        <div id="pagedate">
          Version 1.1,
          Due Date: Tuesday May 1st
        </div>
        <div>
        </div>
      </div>
    </header>


      <section>
        <h2>Purpose:</h2>
        A Code Repository is a Program responsible for managing source code resources, e.g., files and documents.  A fully developed
        Repository will support file persistance, managment of versions, and the acquisition and publication of source and document files.
        A Remote Repository adds the capability to access the Repository's functionality over a communication channel, e.g., interprocess
        communication, inter-network communication, and communication across the internet.
        <div style="height:15px;"></div>
        In this project we will develop a Remote Code Repository, local Client, and communication channel that supports
        client access to the Repository from any internet enabled processor.
        <div style="height:15px;"></div>
        The communication channel will use sockets and support an HTTP like message structure.  The channel <b>could</b> support:
        <ul>
          <li>
            HTTP style request/response transactions
          </li>
          <li>
            One-way communication, allowing asynchronous messaging between any two endpoints that are capable of listening for
            connection requests and connecting to a remote listener.
          </li>
          <li>
            Transmission of byte streams that are set up with one or more negotiation messages followed by transmission of a stream of bytes of
            specified stream size<sup>2</sup>.
          </li>
        </ul>
        One way asynchronous communication is required, and file transfer using messages with binary bodies has already been implemented
        for Project #3 and that is sufficient to meet all requirements related to communication, below.
        <div style="height:15px;"></div>
        The Remote Code Repository will:
        <ul>
          <li>
            Support check-in, check-out, versioning, and browsing, just like we did in Project #2.
          </li>
          <li>
            Transfer source code text files to and from a local Client.
          </li>
          <li>
            Support defining dependency relationships between code packages saved in specific repository folders, based on the
            functionality you provided in Project #2.
          </li>
          <li>
            Support storing package metadata in the NoSql database you developed in Project #1.
          </li>
        </ul>
        <div style="height:15px;"></div>
        Clients of the Remote Code Repository will provide a Graphical User Interface (GUI) with means to:
        <ul>
          <li>
            Upload one or more source code text files to the Remote Repository, specifying one or more categories
            with which those files are associated<sup>1</sup>.
          </li>
          <li>
            Display package categories, based on metadata stored in the NoSql database.
          </li>
          <li>
            Display collections of filenames based on queries defining categories, filenames, dependencies, and versions.
          </li>
          <li>
            Display all of the files in any category that have no parents.
          </li>
        </ul>
        <div style="height:15px;"></div>
      </section>
      <section>
        <h2>Requirements:</h2>
        Your Remote Repository:
        <ol>
          <li>
            (1) <strong>Shall</strong> use Visual Studio 2017 and the standard C++ libraries, as provided in the ECS computer labs.
            You may also use C#, the .Net Windows Presentation Foundation framework, and C++\CLI for the graphical part of each Client.
          </li>
          <li>
            (5) <strong>Shall</strong> provide a Repository Server that provides functionality to check-in, check-out, and browse
            packages, specified by NoSql database queries.
          </li>
          <li>
            (5) <strong>Shall</strong> provide a Client program that can upload and download files<sup>3</sup>, and view Repository contents, as
            described in the Purpose section, above.
          </li>
          <li>
            (2) <strong>Shall</strong> provide a message-passing communication system, based on Sockets, used to access the Repository's
            functionality from another process or machine.
          </li>
          <li>
            (2) The communication system <strong>shall</strong> provide support for passing HTTP style messages using
            asynchronous one-way messaging.
          </li>
          <li>
            (2) The communication system <strong>shall</strong> also support sending and receiving blocks of bytes<sup>6</sup> to support
            file transfer.
          </li>
          <li>
            (8) <strong>Shall</strong> include an automated unit test suite that demonstrates you meet all the requirements of this
            project<sup>4</sup> including the transmission of files.
          </li>
        </ol>
      </section>
      <section class="footnote">
        <div style="height:20px;"></div>
        <hr />
        <ol style="font-size:small">
          <li>
            Categories are the names of folders in which the Repository stores its source code and web files.
            You may define Categories in any way that seems sensible.  For example, they could simply be the namespace(s) for the uploaded files,
            or a Client supplied name.
          </li>
          <li>
            You will find a demonstration of how to programmatically start an application <a href="../code/Project4HelpS17/ProcessDemoWin32">here</a>.
          </li>
          <li>
            The stream capablity is intended to send files, which could be either text or binary format.  Stream size will be the file size.
          </li>
          <li>
            Transmitting and receiving byte streams will be used to send and receive files in either text or binary format.
          </li>
          <li>This is in addition to the construction tests you include as part of every package you submit.</li>
        </ol>
      </section>
      <section class="know">
        <h2>What you need to know:</h2>
        In order to successfully meet these requirements you will need to know:
        <ol>
          <li>
            Details of the C++ language: <a href="http://cppReference.com">http://CppReference.com</a> including C++11 threading
            and concurrency models.
          </li>
          <li>
            C++\CLI or C# syntax in order to build the Client GUI.
          </li>
          <li>
            How sockets and the provided socket library work.
          </li>
          <li>
            All those things you learned while developing code for Projects #1, #2, and #3.
          </li>
        </ol>
      </section>
    </div>
  <div>
    <img class="photo" src="pictures/facultyCenterStrip.jpg" width="98%" />
  </div>
  <spacer-25></spacer-25>
  <info-bar></info-bar>
</body>
</html>