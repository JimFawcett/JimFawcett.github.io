<!DOCTYPE html>
<html>
<head>
  <!--
   - Project1-S2018.htm
   - ver 1.1 - 17 Aug 2011
   - Jim Fawcett, Syracuse University
  -->
  <title>Project #1</title>
  <meta http-equiv="content-type" content="text/html;charset=UTF-8" />
  <meta name="description" content="Software Engineering course notes. Code Samples. Software Links" />
  <meta name="keywords" content="Lecture, Notes, Code, Syracuse,University" />
  <meta name="Author" content="Jim Fawcett" />
  <meta name="Author" content="James Fawcett" />
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
  <script src="js/ScriptsTemplate.js"></script>
  <script src="js/ScriptsKeyboard.js"></script>
  <script src="js/ScriptsMenu.js"></script>
  <link rel="stylesheet" href="css/StylesTemplate.css" />
  <link rel="stylesheet" href="css/StylesMenu.css" />
</head>
<body onload="initializeMenu()" oncontextmenu="return false;">
  <nav>
    <div id="navbar"></div>
  </nav>
  <a id="Next" href="Project2-S2018.htm">N</a>
  <a id="Prev" href="Project4-S2018.htm">P</a>

  <navKeys-Container>
    <nav-Key id="sKey" onclick="toggleSwipeEvents()">S</nav-Key>
    <nav-Key onclick="scrollPageTop()">T</nav-Key>
    <nav-Key onclick="scrollPageBottom()">B</nav-Key>
    <nav-Key onclick="helpWin()">H</nav-Key>
    <nav-Key onclick="loadPrev()">P</nav-Key>
    <nav-Key onclick="loadNext()">N</nav-Key>
  </navKeys-Container>
  <div onmouseover="scrollMenuDown()">

    <header>
      <div id="pagetitle">
        <h1 id="title">Project #1 - Key/Value Database</h1>
        <h3 id="subtitle">Spring 2018</h3>
        <div id="pagedate">
          Version 1.1,
          Due Date: Tuesday, February 6th
        </div>
        <div>
        </div>
      </div>
    </header>

    <!-- Notes Content -->

      <section>
        <h2>Purpose:</h2>
        <p>
          There is currently a lot of technical interest in <a href="https://en.wikipedia.org/wiki/Big_data">&quot;Big Data&quot;</a>.  Extreme examples are: data collection and analyses from the
          Large Hadron Collider, the Sloan Sky Survey, analyses of Biological Genomes, measuring weather patterns, collecting data
          for global climate models, and analyzing client interactions in social networks.
        </p>
        <p>
          Conventional SQL databases are not well suited for these kinds of applications.  While they have worked very well for
          many business applications and record keeping, they get overwhelmed by massive streams of data.  Developers are
          turning to <a href="http://www.paperplanes.de/2010/7/5/relational_data_document_databases_schema_design.html">&quot;noSQL&quot;</a>
          databases like MongoDB, couchDB, Redis, and Big Table to handle massive data collection and analyses.
        </p>
        <p>
          In this project we will explore how a non SQL database can be constructed and used. In the second project we will
          use this database to store package information in a code repository.
        </p>
        <p>
          <div class="notecallout" style="padding:7Px 7px 15px 7px;">
            Note:<br />
            This project is similar to Project #2, Spring 2017.  However, there are enough differences in requirements to
            leave you with significant design and implementation work.  You will find prototype code in the <a href="../Repository/CppNoSqlDb_Prototype">Course Repository</a>.
            <div style="height:15px;"></div>
            The prototype provides code that satisfies Requirement #2.  That allows you to look at C++ code related to your project
            to get you started, let your begin learning the language syntax quickly, and see how code should be structured.
          </div>
        </p>
      </section>
      <section>
        <h2>Requirements:</h2>
        Your NoSqlDb Key/Value Database project:
        <ol>
          <li>
            (1) <strong>Shall</strong> be implemented in C++ using the facilities of the standard C++ Libraries and Visual Studio 2017,
            as provided in the ECS clusters.
          </li>
          <li>
            (1) <strong>Shall</strong> use the C++ standard library's streams for all console I/O and new and delete for all heap-based
            memory management<sup>1</sup>.
          </li>
          <li>
            (1) <strong>Shall</strong> implement a generic key/value in-memory database where each value consists of:
            <ul>
              <li>
                Metadata:
                <ul>
                  <li>A name string</li>
                  <li>A text description of the item</li>
                  <li>
                    A <a href="../Repository/CppDateTime">DateTime</a> instance recording the date and time the value was written to the database.
                  </li>
                  <li>
                    a finite number (possibly zero) of child relationships with other values.  Each element of the child relationships collection
                    is the key of another item in the database. Any item holding a key in this collection is the parent of the element accessed
                    by the key.
                  </li>
                </ul>
              </li>
              <li>
                An instance of the generic type<sup>1</sup>.  This might be a string, a container of a set of values of the same type, or some other collection
                of data captured in some, perhaps custom, data structure.  We will refer to this instance as the database element's payload.
              </li>
            </ul>
            <div style="height:10px;"></div>
            <!--Each of these, e.g., name, description, DateTime, child relationship collection, and payload <strong>shall</strong> be implemented
            with <a href="../Repository/CppProperties">Properties</a>.-->
          </li>
          <li>
            (1) <strong>Shall</strong> support addition and deletion of key/value pairs.
          </li>
          <li>
            (2) <strong>Shall</strong> support editing of values including the addition and/or deletion of relationships,
            editing text metadata, and replacing an existing value's instance with a new instance. Editing of keys is forbidden.
            <div style="height:12px;"></div>
            If you delete child relationships, e.g., delete keys from an element's child collection, you are forbidden to delete
            the elements accessed from those keys from the database.
          </li>
          <!--<li>
            (1) <strong>Shall</strong> accept a positive time interval or number of writes after which the database contents are
            persisted.  This scheduled &quot;save&quot; process shall continue until cancelled.
          </li>-->
          <li>
            (4) <strong>Shall</strong> support queries<sup>2</sup> for:
            <ul>
              <li>The value of a specified key.</li>
              <li>The children of a specified key.</li>
              <li>The set of all keys matching a specified regular-expression pattern.</li>
              <li>
                All keys that contain a specified string in their metadata section, where the specification is based
                on a regular-expression pattern.
              </li>
              <li>
                All keys that contain values written within a specified time-date interval.
                If only one end of the interval is provided shall take the present as the other end of the interval.
              </li>
            </ul>
          </li>
          <li>
            (3) <strong>Shall</strong> support queries on the set of keys returned by a previous query<sup>3</sup>,
            e.g., an &quot;and&quot;ing of multiple queries.
            <strong>Shall</strong> also support queries on the union of results of one or more previous queries, e.g.,
            an &quot;or&quot;ing of multiple queries.
          </li>
          <li>
            (3) <strong>Shall</strong>, on command, persist a colllection of database contents, defined by a collection of keys,
            to an XML file<sup>4,5</sup>.  It is intended
            that this process be reversible, e.g., the database can be restored or augmented<sup>6</sup> from an existing XML file
            as well as write its contents out to one or more XML files.
          </li>
          <li>
            (2) <strong>Shall</strong> implement a Payload type that contains a string, which for Project #2, will be
            the path to a file in the Repository. The Payload type <strong>shall</strong> also contain a std::vector&lt;std::string&gt;, where
            each string is the name of a category associated with the Payload file. For the Repository, the key will be a file name,
            so the combination of key and payload will provide details about a file stored in the Repository.
          </li>
          <li>
            (1) <strong>Shall</strong> provide, in your implementation, at least the following packages: Executive, DBCore, Query, Test.
          </li>
          <li>
            (2) <strong>Shall</strong> be submitted with contents, in the form of an XML file, that describe your project's package structure and dependency relationships
            that can be loaded when your project is graded.
          </li>
          <li>
            (3) <strong>Shall</strong> be accompanied by a test executive that clearly demonstrates you've met all the functional
            requirements #2-#9, above<sup>7</sup>.  If you do not demonstrate a requirement you will not get credit for it even if you have
            it correctly implemented.
          </li>
          <li>
            (1) <strong>Shall</strong> provide a pdf file containing a package diagram<sup>8</sup> of your project.
          </li>
        </ol>
        <div class="paragSpacer"></div>
        <hr />
        <div class="footnote">
          <ol class="footnote">
            <li>
              This instance of the generic type is the &quot;payload&quot; - the data - that we store in the database. The metadata simply
              provides information about this &quot;payload&quot;. Generic types in C++ are template classes.
            </li>
            <li>
              One of the things your project grade will be based on is the language you develop to create and use queries.
            </li>
            <li>
              The intent of this requirement is to support compound queries.  That is, the elements that match a query may
              have conditions on their keys, children, name, time-date, and/or payload, imposed by previous queries.
            </li>
            <li>
              XML is easy to parse with existing tools so it makes a good storage mechanism for data that will be examined by
              other tools.  It is not very space-efficient so a &quot;production&quot; version of this database might
              use some other more efficient, but more complex storage implementation.
            </li>
            <li>
              For value instances that are not strings, you will need to provide a toString() method
              to persist the instance into the text of an XML element.  If the value is an instance of a structured type,
              then the persistence is slightly more complicated.  That will be discussed in one of our Friday help sessions.
            </li>
            <li>
              By augmented we mean that the database already contains data and the contents of the XML file are read and
              inserted into the database without destroying the original data.
            </li>
            <li>
              This requirement is intended to make you design a test sequence that displays each requirement's processing
              in a separate function, called in the Executive package's main function.
            </li>
            <li>
              We recommend that you use gliffy to construct the diagram, then capture the diagram image using the windows
              snipping tool and paste into a word document.  That you can save as a pdf document.  Gliffy is available in the
              chrome webstore.
            </li>
            <li>
              So, you can find all the db items in a given category by enumerating the category's list of keys. This facility
              is very like conventional database indexes. Note that you could implement this requirement with another instance
              of your NoSqlDB.
            </li>
          </ol>
        </div>
      </section>
      <section>
        <h2>What you need to know:</h2>
        In order to successfully meet these requirements you will need to:
        <ol class="footnote">
          <li>
            Write C++ code and use basic facilities of the C++ standard libraries.
          </li>
          <li>
            Use the <a href="../Repository/STL-Containers">STL Containers</a>.
          </li>
          <li><a href="../Repository/XmlDocument">Read and Write XML</a> files.</li>
        </ol>
      </section>
    </div>
    <div style="height:15px;"></div>
  <div>
    <img class="photo" src="pictures/facultyCenterStrip.jpg" width="98%" />
  </div>
  <spacer-25></spacer-25>
  <info-bar></info-bar>
</body>
</html>