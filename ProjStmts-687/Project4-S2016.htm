<!DOCTYPE html>
<html>
<head>
  <!--
   - Project4-S2015.htm - Project #4, Spring 2016
   - ver 1.0 - 06 January 2016
   - Jim Fawcett, Syracuse University
  -->
  <title>Project #4</title>
  <meta http-equiv="content-type" content="text/html;charset=UTF-8" />
  <meta name="description" content="Software Engineering course notes. Code Samples. Software Links" />
  <meta name="keywords" content="Lecture, Notes, Code, Syracuse,University" />
  <meta name="Author" content="Jim Fawcett" />
  <meta name="Author" content="James Fawcett" />
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
  <script type="text/javascript" src="js/jquery-1.6.2.min.js"></script>
  <script type="text/javascript" src="js/CSE687-LectNav.js"></script>
  <script type="text/javascript" src="js/Fallback.js"></script>
  <link rel="stylesheet" href="css/TopLevel.css?v=1.0" />
  <link rel="stylesheet" href="css/LecturesSupplement.css?v=1.0" />
  <link rel="stylesheet" href="css/Fallback.css?v=1.0" />
  <style type="text/css">
    .close {
      margin-top: 0px;
    }

    .note {
      background-color: yellow;
      color: black;
      margin-left: 0;
      margin-right: 0;
      padding: 2px;
    }

    .light {
      background-color: #eee;
      padding: 20px;
      display: table-cell;
    }

    .wblock {
      padding: 20px 30px 30px 30px;
      border: 1px solid black;
      -webkit-box-shadow: 6px 6px 18px rgba(0,0,0,.62);
      -moz-box-shadow: 6px 6px 18px rgba(0,0,0,.62);
      box-shadow: 6px 6px 18px rgba(0,0,0,.62);
    }

    .block {
      padding: 20px 30px 30px 30px;
      border: 1px solid black;
      -webkit-box-shadow: 6px 6px 18px rgba(0,0,0,.62);
      -moz-box-shadow: 6px 6px 18px rgba(0,0,0,.62);
      box-shadow: 6px 6px 18px rgba(0,0,0,.62);
      display: table-cell;
    }

    .vertspace {
      padding: 20px 0px 20px 0px;
    }

    h3 {
      margin-top: 10px;
      margin-bottom: 10px;
    }

    div > ul > li {
      margin: 0px 0px 5px -30px;
      padding: 0;
    }

    ol > li {
      margin-bottom: 20px;
    }

    .spacer {
      height: 10px;
    }

    table {
      border-collapse: collapse;
      border: none;
    }

    tr, td {
      border: none;
      padding: 0px;
    }

    section {
      border: none;
      margin: 20px;
    }

    hr {
      margin: 10px;
      margin-top: -10px;
    }
  </style>
</head>
<body>
  <header>
    <div class="container">
      <div id="prevlink">
        <a href="javascript: history.go(-1)">Back</a>
      </div>
      <div id="nextlink">
        <a href="javascript: history.go(-1)">Back</a>
      </div>
      <div id="topcenter">
        Object Oriented Design - Spring 2016
      </div>
    </div>
    <div id="pagetitle">
      <h1 id="title">Project #4 - Dependency-Based Remote Code Repository</h1>
      <div id="pagedate">
        Version 1.3,
        <script type="text/javascript">
            document.write("Revised: " + document.lastModified)
        </script><br />
        Due Date: Tuesday May 3rd
      </div>
      <div>
      </div>
    </div>
  </header>

  <!-- Site navigation menus are generated with Javascript, using a Fallback link to a Navigation page -->
  <nav>
    <div id="nav">
      <hr />
      <a href="TopNav.htm">Site Navigation with no Javascript</a>
      <hr />
      <br />
    </div>
  </nav>
  <!-- Notes Content -->
  <!--<div class="constr">
    This page is currently under construction.
  </div>-->
  <div class="content">
    <section>
      <h2>Purpose:</h2>
      <p>
        A Code Repository is a Program responsible for managing source code resources, e.g., files and documents.  A fully developed
        Repository will support file persistance, managment of versions, and the acquisition and publication of source and document files.
        A Remote Repository adds the capability to access the Repository's functionality over a communication channel, e.g., interprocess
        communication, inter-network communication, and communication across the internet.
      </p>
      <p>
        In this project we will develop a dependency-based code repository and communication channel that supports
        client access to the repository from any internet enabled processor.
      </p>
      <p>
        The communication channel will use sockets and support an HTTP like message structure.  The channel will support:
        <ul>
          <li>
            HTTP style request/response transactions
          </li>
          <li>
            One-way communication, allowing asynchronous messaging between any two endpoints that are capable of listening for
            connection requests and connecting to a remote listener.
          </li>
          <li>
            Transmission of byte streams that are set up with one or more negotiation messages followed by transmission of a stream of bytes of
            specified stream size<sup>1</sup>.
          </li>
        </ul>
      </p>
      <p>
        The Code Repository will:
        <ul>
          <li>
            Support either module or package checkin, where a module is a named small set of closely related packages, usually from the same namespace.
            You only have to support one of these.
          </li>
          <li>
            Store files in folders based on module namespace or package name and checkin date<sup>2</sup>.
          </li>
          <li>
            Track dependency relationships between modules or packages.
          </li>
          <li>
            Support extraction of all the files in some dependency sub-graph by naming only the root module or package of the sub-graph.
          </li>
          <li>
            You may, but are not required to evaluate dependency relationships during check-in, using analysis facilities you developed in
            previous projects this semester.
          </li>
        </ul>
      </p>
      <p>
        You will track dependencies and versions using metadata files with XML contents.  Alternately you could use a NoSql Database 
        like that developed in CSE681-Software Modeling &amp; Analysis, Project #2, Fall 2015<sup>3</sup>.  However, that would require
        porting to C++ and would contribute a lot of additional work needed for this project.
      </p>
    </section>
    <section>
      <h2>Requirements:</h2>
      Your Remote Repository<sup>4</sup>:
      <ol>
        <li>
          <strong>Shall</strong> use Visual Studio 2015 and its C++ Windows console projects, as provided in the ECS computer labs.
          You must also use Windows Presentation Foundation (WPF) to provide a required client Graphical User Interface (GUI).
        </li>
        <li>
          <strong>Shall</strong> use the C++ standard library's streams for all console I/O and new and delete for all heap-based 
          memory management<sup>5</sup>.
        </li>
        <li>
          (<strong>2-4</strong>) <strong>Shall</strong> provide a Repository program that provides a module and/or package checkin process.  Each checkin
          will support copying and providing metadata for all modules or packages in the Repository.  Metadata contains a description of the module/package and
          a list of other modules/packages on which it depends. 
        </li>
        <li>
          (<strong>4</strong>) <strong>Optionally</strong> automate checkin dependency analysis using the facilities you developed in
          Project #3.
        </li>
        <li>
          (<strong>3-6</strong>) Each module or package checkin <strong>Shall</strong> create a new directory with a unique name based on the
          module or package name and checkin-date. Each module directory contains module metadata containing a description of all packages and 
          package metadata that contains a list of all the files in the package.
        </li>
        <li>
          (<strong>2</strong>) Each checkin directory <strong>Shall</strong> have a boolean closed property.  If the directory is
          not closed files may be added or changed at any time without changing the directory's date.  Once closed the directory contents become immutable.
        </li>
        <li>
          (<strong>4-6</strong>) <strong>Shall</strong> provide an extraction process for modules or packages with or without dependencies.
        </li>
        <li>
          (<strong>3</strong>) <strong>Shall</strong> provide a message-passing communication system used to access the Repository's
          functionality from another process or machine.
        </li>
        <li>
          (<strong>3</strong>) The communication system <strong>shall</strong> provide support for passing HTTP style messages using
          either synchronous request/response or asynchronous one-way messaging.
        </li>
        <li>
          (<strong>3</strong>) The communication system <strong>shall</strong> also support sending and receiving streams of bytes<sup>6</sup>.
          Streams will be established with an initial exchange of messages.
        </li>
        <li>
          (<strong>5</strong>) <strong>Shall</strong> include an automated unit test suite that demonstrates you meet all the requirements of this
          project<sup>7</sup> including the transmission of files.
        </li>
      </ol>
      <div style="height:20px;"></div>
      <hr />
      <ol style="font-size:small">
        <li>
          The stream capablity is intended to send files, which could be either text or binary format.  Stream size will be the file size.
        </li>
        <li>
          This Repository uses module or package names and dates to define unique versions.
        </li>
        <li>
          You could do this either by porting the NoSql database to C++ or by building a managed C++ wrapper around the C# NoSql database.
        </li>
        <li>
          Note that the requirements score can be more than the usual 25 points.  The intent is that you have some flexibility in what you
          implement and, for those of you with enough time, the possibility of scoring more than 100 points on this Project.
        </li>
        <li>
          That means that you are not allowed to use any of the C language I/0, e.g., printf, scanf, etc, nor the C memory management, e.g.,
          calloc, malloc, or free.
        </li>
        <li>
          Transmitting and receiving byte streams will be used to send and receive files in either text or binary format.
        </li>
        <li>This is in addition to the construction tests you include as part of every package you submit.</li>
      </ol>
    </section>
    <section>
      <h2>What you need to know:</h2>
      In order to successfully meet these requirements you will need to know:
      <ol>
        <li>
          Details of the C++ language: <a href="http://cppReference.com">http://CppReference.com</a> including C++11 threading
          and concurrency models.
        </li>
        <li>
          C++\CLI syntax in order to build the Client GUI.
        </li>
        <li>
          How sockets and the provided socket library work.
        </li>
        <li>
          All those things you learned while developing code for Projects #1, #2, and #3.
        </li>
      </ol>
    </section>
  </div>
  <footer>
    <hr />
    <div id="topleft">
      <a href="javascript: history.go(-1)">Back</a>
    </div>
    <div id="topright">
      <a href="javascript: history.go(-1)">Back</a>
    </div>
    <img src="pictures/facultyCenterStrip.jpg" width="100%" />
    <hr />
    Jim Fawcett &copy; copyright 2015
  </footer>
</body>
</html>