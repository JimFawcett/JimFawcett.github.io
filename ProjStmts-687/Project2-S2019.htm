<!DOCTYPE html>
<html>
<head>
  <!--
   - Project2-S2019.htm - Project #1, Fall 2018
   - ver 1.0 - 16 Aug 2017
   - Jim Fawcett, Syracuse University
  -->
  <title>Project #2</title>
  <meta http-equiv="content-type" content="text/html;charset=UTF-8" />
  <meta name="description" content="Software Engineering course notes. Code Samples. Software Links" />
  <meta name="keywords" content="Lecture, Notes, Code, Syracuse,University" />
  <meta name="Author" content="Jim Fawcett" />
  <meta name="Author" content="James Fawcett" />
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
  <script src="js/ScriptsTemplate.js"></script>
  <script src="js/ScriptsKeyboard.js"></script>
  <script src="js/ScriptsMenu.js"></script>
  <link rel="stylesheet" href="css/StylesTemplate.css" />
  <link rel="stylesheet" href="css/StylesMenu.css" />
</head>
<body id="github" onload="initializeMenu()">
  <nav>
    <div id="navbar"></div>
  </nav>
  <a id="Next" href="Project3-S2019.htm">N</a>
  <a id="Prev" href="Project1-S2019.htm">P</a>

  <navKeys-Container>
    <nav-Key id="sKey" onclick="toggleSwipeEvents()">S</nav-Key>
    <nav-Key onclick="scrollPageTop()">T</nav-Key>
    <nav-Key onclick="scrollPageBottom()">B</nav-Key>
    <nav-Key onclick="helpWin()">H</nav-Key>
    <nav-Key onclick="loadPrev()">P</nav-Key>
    <nav-Key onclick="loadNext()">N</nav-Key>
  </navKeys-Container>

  <header>
    <h2 id="title">Project #2 - Source Code Publisher for Projects</h2>
    <div id="pagedate">
      Version 1.1<br />
      Due Date: Tuesday, March 5th, 2019
    </div>
    <!--<a href="../code/Project2HelpS2019">Project #2 helper files</a>-->
  </header>

  <!-- Notes Content -->
  <section>
    <h3>Purpose:</h3>
    One focus area for this course is understanding how to structure and implement big software systems.  By big we mean systems
    that may consist of hundreds or even thousands of packages<sup>1</sup> and perhaps several million lines of code.
    We won't be building anything quite that large, but our projects may be considerably bigger than anything you've worked
    on before.
    <spacer-15></spacer-15>
    In order to successfully implement big systems we need to partition code into relatively small parts, understand them, and thoroughly test
    each of the parts before inserting them into the software baseline<sup>2</sup>.  As new parts are added to the baseline and
    as we make changes to fix latent errors or performance problems we will re-run test sequences for those parts
    and, perhaps, for the entire baseline.
    <spacer-15></spacer-15>
    Managing that process efficiently requires effective tools for publishing sources, performing code analyses,
    and testing.  How we do code analysis was illustrated by SMA projects this past Fall year, and,
    in OOD, last Fall, we implemented a multi-user test facility.
    <spacer-15></spacer-15>
    This Spring, we will focus on making all the source code for large projects
    readily available to anyone with a browser - at least anyone working on the project.
    We will emphasize C++ code but want our publishing tools to be easily extendable to other similar languages like C# and Java.
    The projects this Spring build software publishing tools in several phases - one phase implemented in each of four projects.
    <spacer-15></spacer-15>
    In this second project we build and test a facility for converting all the files found in a directory
    tree to web pages with essentially the same content.  The web pages contain links to files on which they depend.
    <spacer-10></spacer-10>
    <ul class="tight">
      <li>
        <strong>Finds and loads files for Processing from a directory tree:</strong>
        <div class="indent">
          Starting at a path specified on the command line, recursively search each folder in the
          directory tree rooted at the path, for files with names that match a regular expression.  Each
          matching file is loaded and processed, using the facilities developed in Project #1.
        </div>
      </li>
      <li>
        <strong>Records file dependencies for each processed file:</strong>
        <div class="indent">
          Dependencies will be based on #include statements<sup>3</sup> found in each file.  Dependencies
          are recorded with web links in the constructed web pages.
          Only #include statements that cite files in the directory tree are recorded with web links.
        </div>
      </li>
      <li>
      <strong>Provides facilities for optionally hiding comments and/or function bodies:</strong>
      <div class="indent">
        The intent is to allow users some flexibility in what is visible.  We want to allow users to:
        <ul class="tight">
          <li>show or hide comments</li>
          <li>show or hide function bodies</li>
          <li>show just class names by hiding the entire class scope</li>
        </ul>
        This can be done by wrapping text that may be hidden with a styled &lt;div&gt;<sup>4</sup>.
        The hard part is to place the &lt;div&gt;s in appropriate places.  To do that you will need
        to do some relatively simple parsing.  We&apos;ll give you some help with that.
      </div>
    </li>
    </ul>
    <spacer-15></spacer-15>
    Finding dependencies and placing divs requires you to parse the contents of analyzed files.  You
    are encouraged to use a source code parser that you will find in  
    <a href="https://github.com/JimFawcett/CppParser"><strong>https://github.com/JimFawcett/CppParser</strong></a>.
    The <a href="../blogParser.html"><strong>parsing blog</strong></a> will help you get started with that.
  </section>
  <section>
    <h3>Requirements:</h3>
    Your Code Publisher Solution:
    <ol>
      <li>
        <strong>Shall</strong> use Visual Studio 2017 and its C++ Windows Console Projects, as provided in the ECS computer labs.
      </li>
      <li>
        <strong>Shall</strong> use the standard streams libraries for all I/O and operators new and delete for memory management.
      </li>
      <li>
        (<strong>2</strong>) <strong>Shall</strong> provide an Executive package that accepts, from its command line,
        a path containing files to be converted.
      </li>
      <li>
        (<strong>2</strong>) <strong>Shall</strong> also provide Loader, Converter, Dependencies, and Display packages.
      </li>
      <li>
        (<strong>3</strong>) The Loader package <strong>shall</strong> support finding and loading all the files for conversion,
        starting at a path specified by the Executive.
      </li>
      <li>
        (<strong>3</strong>) The Converter package <strong>shall</strong> support wrapping code in an html document, and
        translating the &quot;&lt;&quot; and &quot;&gt;&quot; characters into their corresponding escape sequences.
      </li>
      <li>
        (<strong>5</strong>) The Dependencies package <strong>shall</strong> support insertion, in each analyzed file, links to
        all the files in the directory tree, on which it depends.
      </li>
      <li>
        (<strong>6</strong>) The Display package<sup>5</sup> <strong>shall</strong> support wrapping selected parts of the web
        page in &lt;div&gt; blocks that can be displayed or hidden<sup>6</sup>.  The parts to be selected are:
        <ul class="tight">
          <li>Comment blocks at the begining of each source code file, if they exist</li>
          <li>Function bodies, including the opening and closing braces</li>
          <li>Class bodies, including the opening and closing braces</li>
        </ul>
        The display package <strong>shall</strong> provide the means to specify each of these parts independently.
        That means that the user can display none of the parts, any one or more of the parts, or all of the parts.
      </li>
      <li>
        (<strong>4</strong>) <strong>Shall</strong> include an automated test that demonstrates you meet all the functional
        requirements above.  Note that this is just a set of tests that show clearly the results of each step of processing
        you&apos;ve used to implement this project.
      </li>
    </ol>
    <div class="indent">
      Here is a link to the <a href="https://ecs.syr.edu/faculty/fawcett/handouts/cse687/projects/prgs687.pdf">grade sheet</a> used to guide evaluatation of your work.
    </div>
    <spacer-15></spacer-15>
    <hr />
    <ol style="font-size:small">
      <li>
        In C++, a package consists of two source code files, a header (*.h) and an implementation file (*.cpp) that contain:
        <ul class="tight">
          <li>prologue, providing a name, brief descriptive phrase, author information, and environment information</li>
          <li>description of the package's responsiblities and required files</li>
          <li>maintenance history</li>
          <li>class declaration and definitions</li>
          <li>a main function, guarded by #ifdef and #endif declarations, that implements construction tests for all the defined code</li>
        </ul>
      </li>
      <li>
        A software baseline is the set of all code considered to be part of the current system, excluding experimental code
        that individual developers are working on.
      </li>
      <li>
        Using #includes to find dependencies is a very simple process, but cannot be extended to languages,
        like C# and Java, that do not have #include statements.  Those of you who have taken CSE681 - SMA, this
        past fall, have build a stronger dependency analyzer that does not have these limitations.  You may, if you
        elect to do so, use this stronger type-based process to find dependencies.
      </li>
      <li>
        We will demonstrate, in class, how to show or hide parts of a web page using styled &lt;div&gt; blocks.
      </li>
      <li>
        The Display package doesn&apos;t actually display anything. It supports display functionality by embedding styled
        divs, where appropriate, within the code body.
      </li>
      <li>
        Hiding and showing content is achieved by managing the CSS display property values, e.g., block or none, for
        the &lt;div&gt;s embedded in the code body.
        The project demo given in <a href="https://ecs.syr.edu/faculty/fawcett/handouts/cse687/code/Project2HelpS2019">Project2HelpS2019</a> shows you what is required.
      </li>
    </ol>
  </section>
  <section>
    <h3>What you need to know:</h3>
    In order to successfully meet these requirements you will need to know:
    <spacer-10></spacer-10>
    <ol class="tight">
      <li>Basics of the C++ language: <a href="https://en.cppreference.com/w/">C++ Reference</a></li>
      <li>
        How to implement a simple class hierarchy.  This will be covered briefly in lecture #3 and in more detail later.
      </li>
      <li>
        The <a href="../STL-Containers.html">standard Containers</a>.
      </li>
      <li>How to use Visual Studio.  We will discuss this in one of the Help Sessions.</li>
    </ol>
  </section>
  <spacer-15></spacer-15>
  <div>
    <img class="strip-photo" src="../Pictures/facultyCenterStrip.jpg" width="98%"/>
  </div>
  <info-bar></info-bar>
</body>
</html>