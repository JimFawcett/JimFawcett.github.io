<!DOCTYPE html>
<html>
<head>
  <!--
   - Project1-F2017.htm - Project #1, Fall 2017
   - ver 1.0 - 16 Aug 2017
   - Jim Fawcett, Syracuse University
  -->
  <title>Project #3</title>
  <meta http-equiv="content-type" content="text/html;charset=UTF-8" />
  <meta name="description" content="Software Engineering course notes. Code Samples. Software Links" />
  <meta name="keywords" content="Lecture, Notes, Code, Syracuse,University" />
  <meta name="Author" content="Jim Fawcett" />
  <meta name="Author" content="James Fawcett" />
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
  <script src="js/ScriptsTemplate.js"></script>
  <script src="js/ScriptsKeyboard.js"></script>
  <script src="js/ScriptsMenu.js"></script>
  <script src="js/ScriptsComponents.js"></script>
  <link rel="stylesheet" href="css/StylesTemplate.css" />
  <link rel="stylesheet" href="css/StylesMenu.css" />
  <link rel="stylesheet" href="css/StylesComponents.css" />
</head>
<body id="github" onload="initializeMenu()">
  <nav>
    <div id="navbar"></div>
  </nav>
  <a id="Next" href="Project4-S2019.htm">N</a>
  <a id="Prev" href="Project2-S2019.htm">P</a>

  <navKeys-Container>
    <nav-Key id="sKey" onclick="toggleSwipeEvents()">S</nav-Key>
    <nav-Key onclick="scrollPageTop()">T</nav-Key>
    <nav-Key onclick="scrollPageBottom()">B</nav-Key>
    <nav-Key onclick="helpWin()">H</nav-Key>
    <nav-Key onclick="loadPrev()">P</nav-Key>
    <nav-Key onclick="loadNext()">N</nav-Key>
  </navKeys-Container>

  <header>
    <h2 id="title">Project #3 - Code Publisher Client</h2>
    <div id="pagedate">
      Version 1.0<br />
      Due Date: Tuesday, April 9th, 2019
    </div>
    <!--<a href="../code/Project3HelpS2019">Project #3 helper files</a>-->
  </header>

  <!-- Notes Content -->
  <section>
    <h3>Purpose:</h3>
    One focus area for this course is understanding how to structure and implement big software systems.  By big we mean systems
    that may consist of hundreds or even thousands of packages<sup>1</sup> and perhaps several million lines of code.
    We won't be building anything quite that large, but our projects may be considerably bigger than anything you've worked
    on before.
    <spacer-15></spacer-15>
    In order to successfully implement big systems we need to partition code into relatively small parts and thoroughly test
    each of the parts before inserting them into the software baseline<sup>2</sup>.  As new parts are added to the baseline and
    as we make changes to fix latent errors or performance problems we will re-run test sequences for those parts
    and, perhaps, for the entire baseline.  Managing that process efficiently requires effective tools for code analysis
    as well as testing.  How we do that code analysis is illustrated by the projects for this year.
    <spacer-15></spacer-15>
    The projects this Fall focus on building software testing tools.  We will emphasize C++ code
    but want our tools to be easily extendable to other similar languages like C# and Java.
    <spacer-15></spacer-15>
    In this third project we build and test a Client that provides a Graphical User Interface (GUI)
    for the Code Publisher built in <a href="Project2-S2019.htm">Project #2</a>.  Things get interesting
    here, because the C++ standard libraries do not provide any support for GUIs.  We will use a .Net
    facility, Windows Presentation Foundation (WPF), for that.  But that we build using C#, which does
    not directly interoperate with C++.  We will join the Managed C# code with our C++ Code Publisher
    using a C++\CLI translater.
    Building all this isn&apos;t as complicated as it sounds.
    <spacer-15></spacer-15>
    <div class="left" id="Fig1" style="padding:25px;"></div>
    <spacer-25></spacer-25>
    <div style="display:table-cell; padding-top:35px;">
      Here&apos;s what we need to do for this project:
    </div>
    <spacer-10></spacer-10>
    <div style="display:table-cell;">
      <strong>Implement a tabbed display</strong><br />
      <div class="indent">
        The Client display will need at least two views, one for navigating to the directory to be
        analyzed, and one for displaying a published file.
      </div>
    </div>
    <spacer-5></spacer-5>
    <div style="display:table-cell;">
      <strong>Navigation view:</strong><br />
      <div class="indent">
        The Client&apos;s navigation view supports navigating to the directory to be
        analyzed and supplying a file pattern, used for selecting files to show in
        the Display view.
      </div>
    </div>
    <spacer-5></spacer-5>
    <div style="display:table-cell;">
      <strong>Display view:</strong><br />
      <div class="indent">
        The Display view shows a list of converted files for the project and allows
        the user to display a selected file either as a browser view, or in a pop up
        window showing the web page source.
        <spacer-10></spacer-10>
        This view also allows users to define what is visible.  We want to allow users to:
        <ul class="tight">
          <li>show or hide comments</li>
          <li>show or hide function bodies</li>
          <li>show just class names by hiding the entire class scope</li>
        </ul>
        That will be indicated by checkboxes for each of the above.
      </div>
    </div>
    <spacer-5></spacer-5>
    <div style="display:table-cell;">
      <strong>Provide Code Publisher interface</strong><br />
      <div class="indent">
        This step replaces the Executive package, from Project #2, with an interface and a class that
        implements the interface to use Code Publisher&apos;s facilities.
      </div>
    </div>
    <spacer-5></spacer-5>
    <div style="display:table-cell;">
      <strong>Connect to Code Publisher:</strong><br />
      <div class="indent">
        Build a C++\CLI<sup>3</sup> translater to connect the Client GUI to the Code Publisher, built as
        a dynamic link library.  The translater simply delegates function invocations in the GUI to
        calls into methods in the Code Publisher, using the Publisher&apos;s interface.
      </div>
    </div>
    <!--<ul class="tight">
    <li>
      <strong>Implement a tabbed display:</strong>
      <div class="indent">
        The Client display will need at least two views, one for navigating to the directory to be
        analyzed, and one for displaying a published file.
      </div>
    </li>
    <li>
      <strong>Navigation view:</strong>
      <div class="indent">
        The Client&apos;s navigation view supports navigating to the directory to be
        analyzed and supplying a file pattern, used for selecting files to show in
        the Display view.
      </div>
    </li>
    <li>
      <strong>Display view:</strong>
      <div class="indent">
        The Display view shows a list of converted files for the project and allows
        the user to display a selected file either as a browser view, or in a pop up
        window showing the web page source.
        <spacer-10></spacer-10>
        This view also allows users to define what is visible.  We want to allow users to:
        <ul class="tight">
          <li>show or hide comments</li>
          <li>show or hide function bodies</li>
          <li>show just class names by hiding the entire class scope</li>
        </ul>
        That will be indicated by checkboxes for each of the above.
      </div>
    </li>
    <li>
      <strong>Provide Code Publisher Interface:</strong>
      <div class="indent">
        This step replaces the Executive package, from Project #2, with an interface and a class that
        implements the interface to use Code Publisher&apos;s facilities.
      </div>
    </li>
    <li>
      <strong>Connect to Code Publisher:</strong>
      <div class="indent">
        Build a C++\CLI<sup>3</sup> translater to connect the Client GUI to the Code Publisher, built as
        a dynamic link library.  The translater simply delegates function invocations in the GUI to
        calls into methods in the Code Publisher, using the Publisher&apos;s interface.
      </div>
    </li>
  </ul>-->
    <spacer-15></spacer-15>
    We will discuss each of these steps in class, spending a lot of time with C++\CLI, in
    <a href="https://ecs.syr.edu/faculty/fawcett/handouts/cse687/Lectures/CSE687codeL19.htm">Lecuture #19</a> 
    and WPF in <a href="https://ecs.syr.edu/faculty/fawcett/handouts/cse687/Lectures/CSE687codeL20.htm">Lecture #20</a>.
    <div class="clear"></div>
  </section>
  <section>
    <h3>Requirements:</h3>
    Your Code Publisher Solution:
    <ol>
      <li>
        <strong>Shall</strong> use Visual Studio 2017 and its C++ Windows Console Projects, as provided in the ECS computer labs.
      </li>
      <li>
        <strong>Shall</strong> use Windows Presentation Foundation (WPF) and C# to implement the Client GUI.
      </li>
      <li>
        (<strong>3</strong>) <strong>Shall</strong> provide an interface for the Code Publisher developed in
        <a href="Project2-S2019.htm">Project #2</a>, that declares methods to access all of the Publisher&apos;s
        facilities, and provides an object factory that returns a pointer to the interface.
      </li>
      <li>
        (<strong>2</strong>) <strong>Shall</strong> build the Publisher as a dynamic link library that exposes
        its interface and object factory.
      </li>
      <li>
        (<strong>5</strong>) provide a C++\CLI translater that delegates calls from the Client GUI into the publisher&apos;s
        methods, as declared in its interface.
      </li>
      <li>
        (<strong>10</strong>) provide a Client package that implements a WPF GUI with a least two views, one for
        navigation, and one to display file conversion results, as described in the purpose section.
      </li>
      <li>
        (<strong>5</strong>) <strong>Shall</strong> include an automated test that accepts the path to your project
        directory on its command line, invokes the Code Publisher, through its interface, to convert all the project
        files matching a pattern that accepts *.h and *.cpp files, and then opens the Client GUI's Display view.
        <spacer-15></spacer-15>
        Please set the analysis path to the root of your Project #3 directory.
      </li>
    </ol>
    <div class="indent">
      Here is a link to the <a href="../projects/prgs687.pdf">grade sheet</a> used to guide evaluatation of your work.
    </div>
    <spacer-15></spacer-15>
    <hr />
    <ol style="font-size:small">
      <li>
        In C++, a package consists of two source code files, a header (*.h) and an implementation file (*.cpp) that contain:
        <ul class="tight">
          <li>prologue, providing a name, brief descriptive phrase, author information, and environment information</li>
          <li>description of the package's responsiblities and required files</li>
          <li>maintenance history</li>
          <li>class declaration and definitions</li>
          <li>a main function, guarded by #ifdef and #endif declarations, that implements construction tests for all the defined code</li>
        </ul>
      </li>
      <li>
        A software baseline is the set of all code considered to be part of the current system, excluding experimental code
        that individual developers are working on.
      </li>
      <li>
        C++\CLI is a .Net managed language that shares a lot of its syntax with C++.  It has the unique capability
        to compile both managed code and native code that reside in the same file.
      </li>
    </ol>
  </section>
  <section>
    <h3>What you need to know:</h3>
    In order to successfully meet these requirements you will need to know:
    <spacer-10></spacer-10>
    <ol class="tight">
      <li>
        Basics of the C++\CLI language, covered in
        <a href="cse687codeL19.htm">Lecture #19</a>
      </li>
      <li>
        How to implement a WPF application.  This is covered in detail in <a href="cse687codeL20.htm">Lecture #20</a>.
      </li>
    </ol>
  </section>
  <spacer-15></spacer-15>
  <div>
    <img class="strip-photo" src="../Pictures/facultyCenterStrip.jpg" width="98%"/>
  </div>
  <info-bar></info-bar>
  <script>makeSizer("Client-Publisher.jpg", 600, "Fig1", "Client-Publisher Configuration")</script>
</body>
</html>