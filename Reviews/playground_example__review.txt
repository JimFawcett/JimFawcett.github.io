"playground example name":  "completeness", "understandability", "usefulness" 
==============================================================================
ownership: complete, understandable, very helpful (in the context of Strings is bonus)

copy and move: complete, understandable, very helpful (length is nice and concise)

basic functions: complete, understandable, excellent (concise/perfect length example)

helper functions: complete, understandable, very helpful (good breadth of examples given)

basic functions: complete, understandable, excellent (concise/perfect length)

* structs with defaults and clones: The example is very helpful and understandable, might need a little more context 
   or a reference where to read about, defaults, clones, copy, etc.  is this covered in Bite, or in some part of the Rust story 

generic function and struct: complete, understandable, very helpful (length is nice and consise)

* generic struct: Understandable and very helpful, but perhaps an explanation for is meant by bound?

struct copy and move:  complete, understandable, very helpful

create many std::collection types, complete, understandable, fantastic example of the collections (concise for each)

str: complete, understandable, very helpful (excellent, concise example)

String: complete, understandable, very helpful (excellent, concise example)

iterating over strings: complete, understandable, very helpful (RustBite Iterator is useful for additional context here)

String, str compares:  complete, understandable, very helpful

string conversions:  complete, understandable, (very helpful to see these conversions used in context)

lifecycle using Box:  complete, understandable, very helpful (the RustBite LifeCycle is useful since this 
                                                        example requires that context info.)

functions accepting iterator: complete, understandable, very helpful (length is nice and concise)

iterator for custom type: complete, understandable, excellent (concise/perfect length example)

custom iterator: complete, understandable, very helpful

interation over collections:  complete, understandable, very helpful

into_iter: complete, understandable, very helpful

custom enumertion:  complete, understandable, fanastic example for pattern matching!

non-enum matching:  complete, understandable, also fanastic example (nice and consise as well!)

file error handling: complete, understandable, very helpful

* error bubbling: A good example, but not clear how the bubbling work
? operator could use some explanation in the comments, as well as "uobue" ? 

Lifetimes:  complete, understandable, very helpful


* plugin architecture: I think this is great example, but not sure everyone will understand the intended context for use.  
  Needs the context that is supplied by the RustBites options   

* host owns plugin:  Same as above ( great example, but not sure everyone will understand the indended context for use)

RegEx matching: complete, understandable, fanastic example

RegEx Operations: complete, understandable, (same as above) fanastic example


* interior mutability: complete, not sure everyone understand without explanation,  very good, helpful example 

* interior mut with std::cell::Cells: might be difficult to understand, good example, a bit to bite off in terms content 

Basic Threads: complete, understandable, very helpful (excellent, concise example)

* sharing non-thread-safe value protected by Mutex<T>:  complete,  could use some comments in the code for Arc::new(Mutex::new(s)),
but excellent for me since you reently explained this one in the last BuildOn

* ThreadResult<T>:  great example from my perspective, but may not be understable to most people without explanation